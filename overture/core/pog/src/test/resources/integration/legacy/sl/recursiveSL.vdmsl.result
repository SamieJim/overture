["comprehension map injectivity obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 146:11: (forall g:map (DEFAULT`NodeId) to (map (DEFAULT`ArcId) to (DEFAULT`NodeId)) \u0026 (forall m1, m2 in set {{nid |-\u003e (dom g(nid))} | nid in set (dom g)} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 153:23: (forall m1, m2 in set {{1 |-\u003e {1 |-\u003e 2, 2 |-\u003e 3}}, {2 |-\u003e {3 |-\u003e 4}}, {3 |-\u003e {4 |-\u003e 5}}, {4 |-\u003e {5 |-\u003e 6}}, {5 |-\u003e {6 |-\u003e 6}}, {6 |-\u003e {|-\u003e}}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 21:18: (forall g:DEFAULT`ASyncGraph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (id in set (dom g))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 93:16: (forall acg:DEFAULT`Graph \u0026 (forall id in set (dom acg) \u0026 pre_AllDesc(acg, id)))","recursive function obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 58:16: (forall g:DEFAULT`Graph, id:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (forall c in set g(id) \u0026 (measureGraphReached(g, id, reached) \u003e measureGraphReached(g, c, (reached union {id})))))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 85:42: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (id in set (dom g))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 117:16: (forall acg:DEFAULT`LabGraph \u0026 (forall id in set (dom acg) \u0026 pre_AllLabDesc(acg, id)))","type compatibility obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 63:1: (forall g:DEFAULT`Graph, -:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 (((card (dom g)) - (card reached)) \u003e\u003d 0))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 32:8: (forall g:DEFAULT`ASyncGraph, id:DEFAULT`Id \u0026 pre_TransClos(g, id))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 5:1: (exists g:DEFAULT`Graph \u0026 ((dunion (rng g)) subset (dom g)))","recursive function obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 69:22: (forall g:DEFAULT`AcyclicGraph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (forall c in set g(id) \u0026 (measureTransClos(g, id) \u003e measureTransClos(g, c)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 149:38: (forall g:map (DEFAULT`NodeId) to (map (DEFAULT`ArcId) to (DEFAULT`NodeId)) \u0026 let m:map (DEFAULT`NodeId) to (set of (DEFAULT`ArcId)) \u003d {nid |-\u003e (dom g(nid)) | nid in set (dom g)} in (forall nid1, nid2 in set (dom m) \u0026 ((nid1 \u003c\u003e nid2) \u003d\u003e (nid2 in set (dom m)))))","type compatibility obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 153:23: inv_LabGraph({1 |-\u003e {1 |-\u003e 2, 2 |-\u003e 3}, 2 |-\u003e {3 |-\u003e 4}, 3 |-\u003e {4 |-\u003e 5}, 4 |-\u003e {5 |-\u003e 6}, 5 |-\u003e {6 |-\u003e 6}, 6 |-\u003e {|-\u003e}})","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 90:1: (exists acg:DEFAULT`AcyclicGraph \u0026 (not (exists id in set (dom acg) \u0026 (id in set AllDesc(acg, id)))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 139:16: (forall g:DEFAULT`LabGraph, id:DEFAULT`NodeId, reached:set of (DEFAULT`NodeId) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (forall c in set (rng g(id)) \u0026 pre_LabDescendents(g, c, (reached union {id}))))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 149:24: (forall g:map (DEFAULT`NodeId) to (map (DEFAULT`ArcId) to (DEFAULT`NodeId)) \u0026 let m:map (DEFAULT`NodeId) to (set of (DEFAULT`ArcId)) \u003d {nid |-\u003e (dom g(nid)) | nid in set (dom g)} in (forall nid1, nid2 in set (dom m) \u0026 ((nid1 \u003c\u003e nid2) \u003d\u003e (nid1 in set (dom m)))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 114:1: (exists acg:DEFAULT`AcyclicLabGraph \u0026 (not (exists id in set (dom acg) \u0026 (id in set AllLabDesc(acg, id)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 146:24: (forall g:map (DEFAULT`NodeId) to (map (DEFAULT`ArcId) to (DEFAULT`NodeId)) \u0026 (forall nid in set (dom g) \u0026 (nid in set (dom g))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 50:11: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (forall c in set g(id) \u0026 pre_TransClosAux(g, c, {}))))","type compatibility obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 97:19: inv_Graph({1 |-\u003e {2, 3}, 2 |-\u003e {4}, 3 |-\u003e {5}, 4 |-\u003e {6}, 5 |-\u003e {6}, 6 |-\u003e {}})","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 25:39: (forall g:DEFAULT`ASyncGraph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e let children:set of (DEFAULT`Id) \u003d g(id) in ((not (children \u003d {})) \u003d\u003e (forall c in set children \u0026 pre_Paths(g, c)))))","recursive function obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 139:16: (forall g:DEFAULT`LabGraph, id:DEFAULT`NodeId, reached:set of (DEFAULT`NodeId) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (forall c in set (rng g(id)) \u0026 (measureLabGraphReached(g, id, reached) \u003e measureLabGraphReached(g, c, (reached union {id})))))))","let be st existence obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 42:14: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 (((id in set (dom g)) and (id not in set TransClos(g, id))) \u003d\u003e let children:set of (DEFAULT`Id) \u003d g(id) in ((not (((card children) \u003c\u003e 1) or (exists parent in set (dom g) \u0026 ((parent \u003c\u003e id) and (children subset g(parent)))))) \u003d\u003e (exists child in set children \u0026 true))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 40:44: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 (((id in set (dom g)) and (id not in set TransClos(g, id))) \u003d\u003e let children:set of (DEFAULT`Id) \u003d g(id) in ((not ((card children) \u003c\u003e 1)) \u003d\u003e (forall parent in set (dom g) \u0026 ((parent \u003c\u003e id) \u003d\u003e (parent in set (dom g)))))))","recursive function obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 25:39: (forall g:DEFAULT`ASyncGraph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e let children:set of (DEFAULT`Id) \u003d g(id) in ((not (children \u003d {})) \u003d\u003e (forall c in set children \u0026 (measureTransClos(g, id) \u003e measureTransClos(g, c))))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 85:11: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (forall c in set g(id) \u0026 pre_TransClosAux(g, c, {}))))","recursive function obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 78:16: (forall g:DEFAULT`Graph, id:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (forall c in set g(id) \u0026 (measureGraphReached(g, id, reached) \u003e measureGraphReached(g, c, (reached union {id})))))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 69:22: (forall g:DEFAULT`AcyclicGraph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (forall c in set g(id) \u0026 pre_AsycDescendents(g, c))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 36:18: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 (((id in set (dom g)) and (id not in set TransClos(g, id))) \u003d\u003e (id in set (dom g))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 44:19: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 (((id in set (dom g)) and (id not in set TransClos(g, id))) \u003d\u003e let children:set of (DEFAULT`Id) \u003d g(id) in ((not (((card children) \u003c\u003e 1) or (exists parent in set (dom g) \u0026 ((parent \u003c\u003e id) and (children subset g(parent)))))) \u003d\u003e (forall child in set children \u0026 pre_LinearPath(g, child)))))","type compatibility obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 130:1: (forall g:DEFAULT`LabGraph, -:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 (((card (dom g)) - (card reached)) \u003e\u003d 0))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 11:20: (forall asyncg:DEFAULT`Graph \u0026 (forall id in set (dom asyncg) \u0026 pre_TransClos(asyncg, id)))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 127:11: (forall g:DEFAULT`LabGraph, id:DEFAULT`NodeId \u0026 ((id in set (dom g)) \u003d\u003e (forall c in set (rng g(id)) \u0026 pre_LabDescendents(g, c, {}))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 8:1: (exists asyncg:DEFAULT`ASyncGraph \u0026 (forall id in set (dom asyncg) \u0026 (id not in set TransClos(asyncg, id))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 58:16: (forall g:DEFAULT`Graph, id:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (forall c in set g(id) \u0026 pre_TransClosAux(g, c, (reached union {id}))))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 69:55: (forall g:DEFAULT`AcyclicGraph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (id in set (dom g))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 109:1: (exists g:DEFAULT`LabGraph \u0026 (UniqueArcIds(g) and (forall m in set (rng g) \u0026 ((rng m) subset (dom g)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 140:30: (forall g:DEFAULT`LabGraph, id:DEFAULT`NodeId, reached:set of (DEFAULT`NodeId) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (id in set (dom g)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 50:42: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e (id in set (dom g))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 59:26: (forall g:DEFAULT`Graph, id:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (id in set (dom g)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 79:26: (forall g:DEFAULT`Graph, id:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (id in set (dom g)))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 46:19: (forall g:DEFAULT`Graph, id:DEFAULT`Id \u0026 ((id in set (dom g)) \u003d\u003e pre_TransClos(g, id)))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 153:30: (forall m1, m2 in set {{1 |-\u003e 2}, {2 |-\u003e 3}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 97:19: (forall m1, m2 in set {{1 |-\u003e {2, 3}}, {2 |-\u003e {4}}, {3 |-\u003e {5}}, {4 |-\u003e {6}}, {5 |-\u003e {6}}, {6 |-\u003e {}}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal map application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 127:48: (forall g:DEFAULT`LabGraph, id:DEFAULT`NodeId \u0026 ((id in set (dom g)) \u003d\u003e (id in set (dom g))))","legal function application obligation in \u0027DEFAULT\u0027 (recursiveSL.vdmsl) at line 78:16: (forall g:DEFAULT`Graph, id:DEFAULT`Id, reached:set of (DEFAULT`Id) \u0026 ((id in set (dom g)) \u003d\u003e ((not (id in set reached)) \u003d\u003e (forall c in set g(id) \u0026 pre_Descendents(g, c, (reached union {id}))))))"]