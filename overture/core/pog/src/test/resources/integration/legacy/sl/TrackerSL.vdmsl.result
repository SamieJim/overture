["legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 101:22: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 82:6: (forall trk:DEFAULT`Tracker, cid:DEFAULT`ContainerId, quan:real, mat:DEFAULT`Material \u0026 ((cid not in set (dom (trk.containers))) \u003d\u003e inv_Tracker(mk_Tracker(((trk.containers) munion {cid |-\u003e mk_Container(quan, mat)}), (trk.phases)))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 35:18: inv_Tracker(mk_Tracker(coninfo_inital, phases_inital))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 100:13: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e inv_Phase(mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 15:20: inv_Phase(mk_Phase({}, all_material, 5))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 106:16: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 ((source in set (dom phases)) \u003d\u003e (source in set (dom phases))))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 142:9: (forall phases:DEFAULT`PhaseInfo \u0026 (forall p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) \u003d\u003e (p1 in set (dom phases)))))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 142:35: (forall phases:DEFAULT`PhaseInfo \u0026 (forall p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) \u003d\u003e (p2 in set (dom phases)))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 49:1: (exists mk_Tracker(containers, phases):DEFAULT`Tracker \u0026 (Consistent(containers, phases) and (PhasesDistinguished(phases) and MaterialSafe(containers, phases))))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 149:12: (forall containers:DEFAULT`ContainerInfo, phases:DEFAULT`PhaseInfo \u0026 (forall ph in set (rng phases) \u0026 (forall cid in set (ph.contents) \u0026 ((cid in set (dom containers)) \u003d\u003e (cid in set (dom containers))))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 23:18: inv_Phase(mk_Phase({}, {glass, metal, plastic}, 50))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 93:34: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, dest:DEFAULT`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (dest in set (dom phases)))))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 100:22: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 19:16: inv_Phase(mk_Phase({}, all_material, 5))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 94:37: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, dest:DEFAULT`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) \u003d\u003e (dest in set (dom phases))))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 128:4: (forall tkr:DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (pre_Remove(tkr, cid, source) \u003d\u003e inv_Tracker(mk_Tracker(({cid} \u003c-: (tkr.containers)), (Remove(tkr, cid, source).phases)))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 104:5: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e let pha:DEFAULT`Phase \u003d mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)) in inv_Tracker(mk_Tracker(containers, (phases ++ {source |-\u003e pha})))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 21:21: inv_Phase(mk_Phase({}, {glass, metal, plastic}, 3))","map compatible obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 82:17: (forall trk:DEFAULT`Tracker, cid:DEFAULT`ContainerId, quan:real, mat:DEFAULT`Material \u0026 ((cid not in set (dom (trk.containers))) \u003d\u003e (forall ldom1 in set (dom (trk.containers)), rdom2 in set (dom {cid |-\u003e mk_Container(quan, mat)}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e ((trk.containers)(ldom1) \u003d {cid |-\u003e mk_Container(quan, mat)}(rdom2))))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 118:6: (forall trk:DEFAULT`Tracker, cid:DEFAULT`ContainerId, ptoid:DEFAULT`PhaseId, pfromid:DEFAULT`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let cont:DEFAULT`Phase \u003d (trk.phases)(ptoid) in let pha:DEFAULT`Phase \u003d mk_Phase(((cont.contents) union {cid}), (cont.expected_materials), (cont.capacity)) in inv_Tracker(mk_Tracker((trk.containers), ((Remove(trk, cid, pfromid).phases) ++ {ptoid |-\u003e pha})))))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 29:17: (forall m1, m2 in set {{mk_token(\"Unpacking\") |-\u003e unpacking_inital}, {mk_token(\"Sorting\") |-\u003e sorting_inital}, {mk_token(\"Assay\") |-\u003e assay_inital}, {mk_token(\"Compaction\") |-\u003e compaction_inital}, {mk_token(\"Storage\") |-\u003e storage_inital}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 63:1: (exists p:DEFAULT`Phase \u0026 (((card (p.contents)) \u003c\u003d (p.capacity)) and ((p.expected_materials) \u003c\u003e {})))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 17:18: inv_Phase(mk_Phase({}, all_material, 6))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 102:22: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 94:5: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, dest:DEFAULT`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) \u003d\u003e (cid in set (dom containers))))))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 93:10: (forall mk_Tracker(containers, phases):DEFAULT`Tracker, cid:DEFAULT`ContainerId, dest:DEFAULT`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (dest in set (dom phases)))))","type compatibility obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 114:14: (forall trk:DEFAULT`Tracker, cid:DEFAULT`ContainerId, ptoid:DEFAULT`PhaseId, pfromid:DEFAULT`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let cont:DEFAULT`Phase \u003d (trk.phases)(ptoid) in inv_Phase(mk_Phase(((cont.contents) union {cid}), (cont.expected_materials), (cont.capacity)))))","legal function application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 119:17: (forall trk:DEFAULT`Tracker, cid:DEFAULT`ContainerId, ptoid:DEFAULT`PhaseId, pfromid:DEFAULT`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let cont:DEFAULT`Phase \u003d (trk.phases)(ptoid) in let pha:DEFAULT`Phase \u003d mk_Phase(((cont.contents) union {cid}), (cont.expected_materials), (cont.capacity)) in pre_Remove(trk, cid, pfromid)))","legal function application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 129:15: (forall tkr:DEFAULT`Tracker, cid:DEFAULT`ContainerId, source:DEFAULT`PhaseId \u0026 (pre_Remove(tkr, cid, source) \u003d\u003e pre_Remove(tkr, cid, source)))","legal map application obligation in \u0027DEFAULT\u0027 (TrackerSL.vdmsl) at line 112:14: (forall trk:DEFAULT`Tracker, cid:DEFAULT`ContainerId, ptoid:DEFAULT`PhaseId, pfromid:DEFAULT`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))"]