["legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 296:3: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 pre_min({distance(p1, p2) | p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs)))}))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 462:49: ((forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes)))))) \u003d\u003e let new_neq:DEFAULT`Kg \u003d find_max_neq(pex, (rng exs~)) in let new_mgzn:DEFAULT`Magazine \u003d mu((pex.mgzn), max_neq |-\u003e new_neq) in let new_pex:DEFAULT`Pot_explosion_site \u003d mu(pex, mgzn |-\u003e new_mgzn) in let new_building:DEFAULT`Building \u003d mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in inv_Quad((pex.vertices)))","ordered obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 12:33: (forall k:(DEFAULT`Inf | real) \u0026 ((k \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e (is_(k, real) and is_(0, real))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 95:43: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 430:14: (((site in set (dom pes)) and (exists pt:DEFAULT`Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements)))))) \u003d\u003e (site in set (dom pes~)))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 158:5: (forall m1, m2 in set {{\u003cONEPONE\u003e |-\u003e 1}, {\u003cONEPTWO\u003e |-\u003e 2}, {\u003cONEPTHREE\u003e |-\u003e 3}, {\u003cONEPFOUR\u003e |-\u003e 4}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 185:40: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (2 in set (inds v))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 415:54: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e inv_Quad((pes.vertices)))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 428:42: ((site in set (dom pes)) \u003d\u003e (forall pt:DEFAULT`Point \u0026 (site in set (dom pes))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 406:26: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 pre_incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))))","operation postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 448:1: (forall pex:DEFAULT`Pot_explosion_site, label:DEFAULT`Site_label, type:DEFAULT`Storage_building, oldstate:DEFAULT`Store \u0026 (pre_ADD_PES(pex, label, type, oldstate) \u003d\u003e (exists newstate:DEFAULT`Store \u0026 post_ADD_PES(pex, label, type, oldstate, newstate))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 320:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_2)) \u003d\u003e (tbe in set (dom asharp(\u003cONEPTWO\u003e)))))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 320:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_2)) \u003d\u003e (\u003cONEPTWO\u003e in set (dom asharp))))))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 161:5: (forall m1, m2 in set {{0 |-\u003e \u003cPERP\u003e}, {1 |-\u003e \u003cFACING\u003e}, {2 |-\u003e \u003cPERP\u003e}, {3 |-\u003e \u003cAWAY\u003e}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","operation postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 425:1: (forall o:DEFAULT`Object, elt:DEFAULT`Element_label, site:DEFAULT`Site_label, oldstate:DEFAULT`Store \u0026 (pre_ADD_OBJECT(o, elt, site, oldstate) \u003d\u003e (exists newstate:DEFAULT`Store \u0026 post_ADD_OBJECT(o, elt, site, oldstate, newstate))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 441:14: (((site in set (dom pes)) and (elt in set (dom ((pes(site).mgzn).elements)))) \u003d\u003e (site in set (dom pes~)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 101:26: (forall pes:DEFAULT`Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 (1 in set (inds (pes.vertices)))))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 302:29: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (table_entry(pes, exs) in set (dom bsharp(((pes.mgzn).hzd)))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 103:26: (forall pes:DEFAULT`Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 ((distance((pes.vertices)(1), (pes.vertices)(i)) \u003d ((pes.mgzn).length)) \u003d\u003e (1 in set (inds (pes.vertices))))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 96:40: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (1 in set (inds (pes.vertices))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 406:41: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 inv_Quad((pes.vertices))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 407:25: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 (1 in set (inds (pes.vertices)))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 402:5: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 ((distance(p1, p2) \u003d distance(p1, p4)) \u003d\u003e ((distance(p2, p5) \u003d distance(p2, p6)) \u003d\u003e pre_line_eqn(p5, p6, p2))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 370:12: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (exists exset:set of (DEFAULT`Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e pre_nearest_storage_building(pes, exs))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 331:1: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (pre_nearest_storage_building(pes, exs) \u003d\u003e (exists e:DEFAULT`Exposed_site \u0026 post_nearest_storage_building(pes, exs, e))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 413:29: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (1 in set (inds (pes.vertices))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 416:59: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e inv_Quad((pes.vertices)))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 250:1: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 is_(let inc:nat \u003d rel_pos(pes, exs) in let exs_ro:(\u003cNONE\u003e | DEFAULT`RelOrientation) \u003d (if is_(((exs.building).type), Storage_building)\nthen orientation(((inc + (exs.door)) mod 4))\nelse \u003cNONE\u003e), pes_ro:(\u003cNONE\u003e | DEFAULT`RelOrientation) \u003d (if (((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e)\nthen orientation(((inc + (pes.door)) mod 4))\nelse \u003cNONE\u003e) in let o_exs:(DEFAULT`Exs_types * (\u003cNONE\u003e | DEFAULT`RelOrientation)) \u003d mk_(((exs.building).type), exs_ro), o_pes:(DEFAULT`Pes_types * (\u003cNONE\u003e | DEFAULT`RelOrientation)) \u003d mk_(((pes.mgzn).type), pes_ro) in mk_(o_exs, o_pes), (DEFAULT`OrientedExs * DEFAULT`OrientedPes)))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 340:1: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (pre_nearest_inhabited_building(pes, exs) \u003d\u003e (exists e:DEFAULT`Exposed_site \u0026 post_nearest_inhabited_building(pes, exs, e))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 205:1: (forall o:DEFAULT`Object, m:DEFAULT`Magazine \u0026 (pre_find_point(o, m) \u003d\u003e (exists pt:DEFAULT`Point \u0026 post_find_point(o, m, pt))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 87:42: (forall exs:DEFAULT`Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e ((distance((exs.vertices)(1), (exs.vertices)(i)) \u003d ((exs.building).length)) \u003d\u003e (j in set (inds (exs.vertices)))))))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 90:1: (exists pes:DEFAULT`Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) and (((pes.door) in set {0, ... ,3}) and (exists i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 ((distance((pes.vertices)(1), (pes.vertices)(i)) \u003d ((pes.mgzn).length)) and (distance((pes.vertices)(1), (pes.vertices)(j)) \u003d ((pes.mgzn).breadth)))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 184:45: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (3 in set (inds v)))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 325:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((tbe in set exceptions_hd1_3b) \u003d\u003e (\u003cONEPTHREE\u003e in set (dom asharp))))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 85:42: (forall exs:DEFAULT`Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e (i in set (inds (exs.vertices))))))))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 139:7: (exists s:set of (DEFAULT`Table_Co_ordinate) \u0026 true)","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 410:23: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in (((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x)) \u003d\u003e inv_Quad((pes.vertices)))))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 286:32: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e ((y \u003c\u003d max({(p1.y), (p2.y)})) \u003d\u003e ((x \u003c\u003e (p1.x)) \u003d\u003e ((x - (p1.x)) \u003c\u003e 0)))))))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 183:40: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e (3 in set (inds v))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 192:1: (forall x:real \u0026 (pre_sqrt(x) \u003d\u003e (exists s:DEFAULT`Realp \u0026 post_sqrt(x, s))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 11:1: (exists k:DEFAULT`Kg \u0026 ((k \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e (k \u003e\u003d 0)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 385:39: (forall v:DEFAULT`Quad \u0026 (exists p:DEFAULT`Point \u0026 (forall i in set {1, ... ,3} \u0026 (1 in set (inds v)))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 81:23: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (1 in set (inds (exs.vertices))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 101:42: (forall pes:DEFAULT`Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 (i in set (inds (pes.vertices)))))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 349:1: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (pre_nearest_traffic_route(pes, exs) \u003d\u003e (exists e:DEFAULT`Exposed_site \u0026 post_nearest_traffic_route(pes, exs, e))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 380:3: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 ((exs \u003c\u003e {}) \u003d\u003e pre_min({qd(pes, e) | e in set nearest_buildings(pes, exs)})))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 95:45: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 431:26: (((site in set (dom pes)) and (exists pt:DEFAULT`Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements)))))) \u003d\u003e let p:DEFAULT`Pot_explosion_site \u003d pes~(site) in pre_find_point(o, (p.mgzn)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 185:23: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (3 in set (inds v))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 98:23: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (1 in set (inds (pes.vertices))))))","finite set obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 296:7: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists finmap1:map (nat) to (DEFAULT`Metre) \u0026 (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 (((p1 in set perimeter(pes)) and (p2 in set perimeter(exs))) \u003d\u003e (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d distance(p1, p2)))))))","state invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 166:7: (exists pes:inmap (DEFAULT`Site_label) to (DEFAULT`Pot_explosion_site), exs:inmap (DEFAULT`Site_label) to (DEFAULT`Exposed_site), xmax:DEFAULT`Metre, ymax:DEFAULT`Metre \u0026 ((xmax \u003e 0) and ((ymax \u003e 0) and (((dom pes) subset (dom exs)) and (forall p in set (dom pes) \u0026 is_(((exs(p).building).type), Storage_building))))))","operation postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 470:1: (forall ex:DEFAULT`Exposed_site, label:DEFAULT`Site_label, oldstate:DEFAULT`Store \u0026 (pre_ADD_EXP(ex, label, oldstate) \u003d\u003e (exists newstate:DEFAULT`Store \u0026 post_ADD_EXP(ex, label, oldstate, newstate))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 14:1: (exists r:DEFAULT`Realp \u0026 (r \u003e\u003d 0))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 358:1: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (pre_nearest_process_building(pes, exs) \u003d\u003e (exists e:DEFAULT`Exposed_site \u0026 post_nearest_process_building(pes, exs, e))))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 142:7: (exists s:set of (DEFAULT`Table_Co_ordinate) \u0026 true)","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 326:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((not (tbe in set exceptions_hd1_3b)) \u003d\u003e (\u003cONEPTHREE\u003e in set (dom asharp))))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 97:43: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 267:1: (forall s:set of (DEFAULT`Realp) \u0026 (pre_max(s) \u003d\u003e (exists m:DEFAULT`Realp \u0026 post_max(s, m))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 395:27: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e pre_line_eqn(p5, p6, p2)))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 286:59: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e ((y \u003c\u003d max({(p1.y), (p2.y)})) \u003d\u003e ((x \u003c\u003e (p1.x)) \u003d\u003e (((p2.x) - (p1.x)) \u003c\u003e 0)))))))))))","finite map obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 129:3: (exists finmap1:map (nat) to (map (DEFAULT`Hzd) to (map (DEFAULT`Table_Co_ordinate) to (real))) \u0026 (forall h:DEFAULT`Hzd \u0026 (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d {h |-\u003e let m:map (DEFAULT`Table_Co_ordinate) to (real) in m}))))","ordered obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 237:65: (forall o:DEFAULT`Object, m:DEFAULT`Magazine \u0026 (((m.max_neq) \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e (is_((sum({((elt.object).neq) | elt in set (rng (m.elements))}) + (o.neq)), real) and is_((m.max_neq), real))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 79:40: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e (1 in set (inds (exs.vertices))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 96:37: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 77:40: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (1 in set (inds (exs.vertices)))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 409:16: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in inv_Quad((pes.vertices))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 183:23: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e (2 in set (inds v))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 462:20: ((forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes)))))) \u003d\u003e let new_neq:DEFAULT`Kg \u003d find_max_neq(pex, (rng exs~)) in let new_mgzn:DEFAULT`Magazine \u003d mu((pex.mgzn), max_neq |-\u003e new_neq) in let new_pex:DEFAULT`Pot_explosion_site \u003d mu(pex, mgzn |-\u003e new_mgzn) in let new_building:DEFAULT`Building \u003d mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in (inv_Exposed_site(mk_Exposed_site(new_building, (pex.vertices), (pex.door))) and inv_Quad((pex.vertices))))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 129:15: (forall h:DEFAULT`Hzd \u0026 (exists m:map (DEFAULT`Table_Co_ordinate) to (real) \u0026 true))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 383:1: (forall v:DEFAULT`Quad \u0026 (exists p:DEFAULT`Point \u0026 post_centre(v, p)))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 415:70: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (((centre((exs.vertices)).x) - (centre((pes.vertices)).x)) \u003c\u003e 0))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 237:12: (forall o:DEFAULT`Object, m:DEFAULT`Magazine \u0026 (((m.max_neq) \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_({((elt.object).neq) | elt in set (rng (m.elements))}, set of (real))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 413:20: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e pre_line_eqn((pes.vertices)(1), (pes.vertices)(4), centre((pes.vertices))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 184:18: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (1 in set (inds v)))))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 164:19: (exists x:nat \u0026 true)","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 325:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((tbe in set exceptions_hd1_3b) \u003d\u003e (tbe in set (dom asharp(\u003cONEPTHREE\u003e)))))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 79:35: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 184:23: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (4 in set (inds v)))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 211:3: (forall o:DEFAULT`Object, m:DEFAULT`Magazine \u0026 ((o.hzd) in set (dom hzdnum)))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 279:54: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 (((p2.x) \u003d (p1.x)) \u003d\u003e (forall y:DEFAULT`Realp \u0026 (truncated(y) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e pre_max({(p1.y), (p2.y)}))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 80:45: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 399:12: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):DEFAULT`Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):DEFAULT`Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in let y3:real \u003d (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in pre_sqrt(((((x3 - (p2.x)) ** 2) + ((y3 - (p2.y)) ** 2)) / (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2))))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 440:45: ((site in set (dom pes)) \u003d\u003e (site in set (dom pes)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 414:43: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e inv_Quad((pes.vertices)))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 77:35: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 480:27: ((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 pre_find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))))))))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 225:12: (forall s:set of (real) \u0026 ((not (s \u003d {})) \u003d\u003e (exists x:real \u0026 (x in set s))))","finite map obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 125:3: (exists finmap1:map (nat) to (map (DEFAULT`Hzd) to (map (DEFAULT`Table_Co_ordinate) to (real))) \u0026 (forall h:DEFAULT`Hzd \u0026 (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d {h |-\u003e let m:map (DEFAULT`Table_Co_ordinate) to (real) in m}))))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 133:7: (exists s:set of (DEFAULT`Table_Co_ordinate) \u0026 true)","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 376:12: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (exists exset:set of (DEFAULT`Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e (((nearest_process_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e))) \u003d\u003e (((nearest_inhabited_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cTRAFFICROUTE\u003e))) \u003d\u003e pre_nearest_traffic_route(pes, exs)))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 304:1: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 inv_Kg(let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :\n(\u003cONEPONE\u003e) -\u003e (if (tbe in set exceptions_hd1_1)\nthen (if (d \u003c 180)\nthen (0.54 * (d ** (3 / 2)))\nelseif ((180 \u003c\u003d d) and (d \u003c 240))\nthen (0.03 * (d ** 2))\nelse ((9.1 * (10 ** -5)) * (d ** 3)))\nelse (asharp(\u003cONEPONE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPTWO\u003e) -\u003e (if (tbe in set exceptions_hd1_2)\nthen \u003cINFINITY\u003e\nelse (asharp(\u003cONEPTWO\u003e)(tbe) * (d ** 5.5))),\n(\u003cONEPTHREE\u003e) -\u003e (if (tbe in set exceptions_hd1_3a)\nthen \u003cINFINITY\u003e\nelseif (tbe in set exceptions_hd1_3b)\nthen (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 2))\nelse (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPFOUR\u003e) -\u003e \u003cINFINITY\u003e\n end)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 174:53: (forall mk_Store(pes, exs, xmax, ymax):DEFAULT`Store \u0026 ((xmax \u003e 0) \u003d\u003e ((ymax \u003e 0) \u003d\u003e (((dom pes) subset (dom exs)) \u003d\u003e (forall p in set (dom pes) \u0026 (p in set (dom exs)))))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 374:12: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (exists exset:set of (DEFAULT`Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e (((nearest_process_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e))) \u003d\u003e pre_nearest_inhabited_building(pes, exs))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 254:53: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in (is_(((exs.building).type), Storage_building) \u003d\u003e (((inc + (exs.door)) mod 4) \u003e\u003d 0)))","enumeration map injectivity obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 148:5: (forall m1, m2 in set {{1 |-\u003e 2}, {2 |-\u003e 3}, {3 |-\u003e 4}, {4 |-\u003e 1}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 399:47: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):DEFAULT`Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):DEFAULT`Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in let y3:real \u003d (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in ((((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2)) \u003c\u003e 0)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 184:40: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e (2 in set (inds v)))))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 389:34: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point \u0026 ((distance(p1, p3) \u003d distance(p2, p3)) \u003d\u003e ((((p1.x) + (p2.x)) - (2 * (p3.x))) \u003c\u003e 0)))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 421:5: (forall r:real \u0026 (exists res:real \u0026 true))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 190:20: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 pre_sqrt(((((p2.x) - (p1.x)) ** 2) + (((p2.y) - (p1.y)) ** 2))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 80:43: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 185:18: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (1 in set (inds v))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 413:46: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in ((not ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))) \u003d\u003e (4 in set (inds (pes.vertices))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 78:43: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 254:24: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in (is_(((exs.building).type), Storage_building) \u003d\u003e (((inc + (exs.door)) mod 4) in set (dom orientation))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 291:16: (forall site:(DEFAULT`Exposed_site | DEFAULT`Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (i in set (inds (site.vertices)))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 380:7: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 ((exs \u003c\u003e {}) \u003d\u003e is_({qd(pes, e) | e in set nearest_buildings(pes, exs)}, set of (DEFAULT`Realp))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 185:45: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e ((distance(v(1), v(2)) \u003d distance(v(3), v(4))) \u003d\u003e ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) \u003d\u003e (4 in set (inds v))))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 73:1: (exists exs:DEFAULT`Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) and (((exs.door) in set {0, ... ,3}) and (exists i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) and ((distance((exs.vertices)(1), (exs.vertices)(i)) \u003d ((exs.building).length)) and (distance((exs.vertices)(1), (exs.vertices)(j)) \u003d ((exs.building).breadth))))))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 263:1: (forall s:set of (DEFAULT`Realp) \u0026 (pre_min(s) \u003d\u003e (exists m:DEFAULT`Realp \u0026 post_min(s, m))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 407:42: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 (4 in set (inds (pes.vertices)))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 183:18: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e (1 in set (inds v))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 79:37: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 183:45: (forall v:seq of (DEFAULT`Point) \u0026 (((len v) \u003d 4) \u003d\u003e (4 in set (inds v))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 291:33: (forall site:(DEFAULT`Exposed_site | DEFAULT`Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (next_point(i) in set (inds (site.vertices)))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 405:1: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 post_ang_sep(pes, exs, qsharp)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 77:37: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 408:25: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 (2 in set (inds (exs.vertices)))))","operation postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 438:1: (forall elt:DEFAULT`Element_label, site:DEFAULT`Site_label, oldstate:DEFAULT`Store \u0026 (pre_REMOVE_OBJECT(elt, site, oldstate) \u003d\u003e (exists newstate:DEFAULT`Store \u0026 post_REMOVE_OBJECT(elt, site, oldstate, newstate))))","finite set obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 277:11: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 (((p2.x) \u003d (p1.x)) \u003d\u003e (exists finmap1:map (nat) to (DEFAULT`Point) \u0026 (forall y:DEFAULT`Realp \u0026 ((truncated(y) and ((min({(p1.y), (p2.y)}) \u003c\u003d y) and (y \u003c\u003d max({(p1.y), (p2.y)})))) \u003d\u003e (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d mk_Point((p1.x), y))))))))","ordered obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 482:42: ((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 let proposed_neq:DEFAULT`Kg \u003d find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))) in ((proposed_neq \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e (is_(find_max_neq(pex, (rng exs)), real) and is_(proposed_neq, real))))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 407:59: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (exists qsharp:real \u0026 (1 in set (inds (exs.vertices)))))","comprehension map injectivity obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 125:3: (forall m1, m2 in set {{h |-\u003e let m:map (DEFAULT`Table_Co_ordinate) to (real) in m} | h:DEFAULT`Hzd} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","cases exhaustive obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 308:9: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((((((pes.mgzn).hzd) \u003d \u003cONEPONE\u003e) or (((pes.mgzn).hzd) \u003d \u003cONEPTWO\u003e)) or (((pes.mgzn).hzd) \u003d \u003cONEPTHREE\u003e)) or (((pes.mgzn).hzd) \u003d \u003cONEPFOUR\u003e)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 429:45: ((site in set (dom pes)) \u003d\u003e (forall pt:DEFAULT`Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) \u003d\u003e (site in set (dom pes)))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 68:1: (exists q:DEFAULT`Quad \u0026 (((len q) \u003d 4) and rectangular(q)))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 284:17: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e pre_min({(p1.y), (p2.y)}))))))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 211:20: (forall o:DEFAULT`Object, m:DEFAULT`Magazine \u0026 ((m.hzd) in set (dom hzdnum)))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 136:7: (exists s:set of (DEFAULT`Table_Co_ordinate) \u0026 true)","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 283:48: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e pre_max({(p1.x), (p2.x)})))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 85:26: (forall exs:DEFAULT`Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e (1 in set (inds (exs.vertices))))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 97:45: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 114:1: (exists mk_(pes, ro):DEFAULT`OrientedPes \u0026 ((pes \u003c\u003e \u003cEARTHCOVEREDBUILDING\u003e) \u003c\u003d\u003e (ro \u003d \u003cNONE\u003e)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 237:59: (forall o:DEFAULT`Object, m:DEFAULT`Magazine \u0026 (((m.max_neq) \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e is_((o.neq), real)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 433:44: (((site in set (dom pes)) and (exists pt:DEFAULT`Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements)))))) \u003d\u003e let p:DEFAULT`Pot_explosion_site \u003d pes~(site) in let mk_Point(x, y):DEFAULT`Point \u003d find_point(o, (p.mgzn)) in let new_elems:map (DEFAULT`Element_label) to (DEFAULT`Element) \u003d (((p.mgzn).elements) ++ {elt |-\u003e mk_Element(o, x, y)}) in is_(new_elems, inmap (DEFAULT`Element_label) to (DEFAULT`Element)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 103:42: (forall pes:DEFAULT`Pot_explosion_site \u0026 ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((pes.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 ((distance((pes.vertices)(1), (pes.vertices)(i)) \u003d ((pes.mgzn).length)) \u003d\u003e (j in set (inds (pes.vertices))))))))","function postcondition satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 367:1: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (exists exset:set of (DEFAULT`Exposed_site) \u0026 post_nearest_buildings(pes, exs, exset)))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 110:1: (exists mk_(exs, ro):DEFAULT`OrientedExs \u0026 ((not is_(exs, Storage_building)) \u003c\u003d\u003e (ro \u003d \u003cNONE\u003e)))","let be st existence obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 125:15: (forall h:DEFAULT`Hzd \u0026 (exists m:map (DEFAULT`Table_Co_ordinate) to (real) \u0026 true))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 482:15: ((not is_(((ex.building).type), Storage_building)) \u003d\u003e (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) \u003d\u003e ((label not in set (dom exs)) \u003d\u003e (forall pex in set (rng pes) \u0026 let proposed_neq:DEFAULT`Kg \u003d find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))) in ((proposed_neq \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e pre_find_max_neq(pex, (rng exs))))))))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 397:22: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):DEFAULT`Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):DEFAULT`Line \u003d line_eqn(p3, p4, p1) in ((m2 - m1) \u003c\u003e 0)))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 69:26: (forall q:seq of (DEFAULT`Point) \u0026 (((len q) \u003d 4) \u003d\u003e pre_rectangular(q)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 96:35: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 ((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) \u003d\u003e inv_Realp(0))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 283:17: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e pre_min({(p1.x), (p2.x)}))))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 372:12: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 (exists exset:set of (DEFAULT`Exposed_site) \u0026 ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e pre_nearest_process_building(pes, exs)))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 402:26: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 ((distance(p1, p2) \u003d distance(p1, p4)) \u003d\u003e ((distance(p2, p5) \u003d distance(p2, p6)) \u003d\u003e pre_line_eqn(p3, p4, p1))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 316:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_1)) \u003d\u003e (tbe in set (dom asharp(\u003cONEPONE\u003e))))))","recursive function obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 227:14: (forall s:set of (real) \u0026 ((not (s \u003d {})) \u003d\u003e (forall x:real \u0026 ((x in set s) \u003d\u003e (Card(s) \u003e Card((s \\ {x})))))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 87:26: (forall exs:DEFAULT`Exposed_site \u0026 ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) \u003d\u003e (((exs.door) in set {0, ... ,3}) \u003d\u003e (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) \u003d\u003e ((distance((exs.vertices)(1), (exs.vertices)(i)) \u003d ((exs.building).length)) \u003d\u003e (1 in set (inds (exs.vertices)))))))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 279:25: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 (((p2.x) \u003d (p1.x)) \u003d\u003e (forall y:DEFAULT`Realp \u0026 (truncated(y) \u003d\u003e pre_min({(p1.y), (p2.y)})))))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 390:50: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point \u0026 ((distance(p1, p3) \u003d distance(p2, p3)) \u003d\u003e ((((p1.x) + (p2.x)) - (2 * (p3.x))) \u003c\u003e 0)))","comprehension map injectivity obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 129:3: (forall m1, m2 in set {{h |-\u003e let m:map (DEFAULT`Table_Co_ordinate) to (real) in m} | h:DEFAULT`Hzd} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 385:20: (forall v:DEFAULT`Quad \u0026 (exists p:DEFAULT`Point \u0026 (forall i in set {1, ... ,3} \u0026 (i in set (inds v)))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 94:37: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal sequence application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 94:40: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (1 in set (inds (pes.vertices)))))","non-zero obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 398:31: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):DEFAULT`Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):DEFAULT`Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in ((m2 - m1) \u003c\u003e 0)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 302:29: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (((pes.mgzn).hzd) in set (dom bsharp)))","finite set obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 280:11: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (exists finmap1:map (nat) to (DEFAULT`Point) \u0026 (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 ((truncated(x) and (truncated(y) and ((min({(p1.x), (p2.x)}) \u003c\u003d x) and ((x \u003c\u003d max({(p1.x), (p2.x)})) and ((min({(p1.y), (p2.y)}) \u003c\u003d y) and ((y \u003c\u003d max({(p1.y), (p2.y)})) and (if (x \u003c\u003e (p1.x))\nthen (((y - (p1.y)) / (x - (p1.x))) \u003d (((p2.y) - (p1.y)) / ((p2.x) - (p1.x))))\nelse (y \u003d (p1.y))))))))) \u003d\u003e (exists findex2 in set (dom finmap1) \u0026 (finmap1(findex2) \u003d mk_Point(x, y))))))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 378:1: (forall pes:DEFAULT`Pot_explosion_site, exs:set of (DEFAULT`Exposed_site) \u0026 ((exs \u003c\u003e {}) \u003d\u003e inv_Kg(min({qd(pes, e) | e in set nearest_buildings(pes, exs)}))))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 78:45: (forall exs:DEFAULT`Exposed_site \u0026 (forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 247:1: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 (((floor ang_sep(pes, exs)) div 90) \u003e\u003d 0))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 257:53: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in ((((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e) \u003d\u003e (((inc + (pes.door)) mod 4) \u003e\u003d 0)))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 284:48: (forall p1:DEFAULT`Point, p2:DEFAULT`Point \u0026 ((not ((p2.x) \u003d (p1.x))) \u003d\u003e (forall x:DEFAULT`Realp, y:DEFAULT`Realp \u0026 (truncated(x) \u003d\u003e (truncated(y) \u003d\u003e ((min({(p1.x), (p2.x)}) \u003c\u003d x) \u003d\u003e ((x \u003c\u003d max({(p1.x), (p2.x)})) \u003d\u003e ((min({(p1.y), (p2.y)}) \u003c\u003d y) \u003d\u003e pre_max({(p1.y), (p2.y)})))))))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 396:27: (forall p1:DEFAULT`Point, p2:DEFAULT`Point, p3:DEFAULT`Point, p4:DEFAULT`Point, p5:DEFAULT`Point, p6:DEFAULT`Point \u0026 (((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1))) \u003d\u003e let mk_Line(m1, c1):DEFAULT`Line \u003d line_eqn(p5, p6, p2) in pre_line_eqn(p3, p4, p1)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 257:24: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let inc:nat \u003d rel_pos(pes, exs) in ((((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e) \u003d\u003e (((inc + (pes.door)) mod 4) in set (dom orientation))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 326:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((not (\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((not (\u003cONEPTWO\u003e \u003d ((pes.mgzn).hzd))) \u003d\u003e ((\u003cONEPTHREE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_3a)) \u003d\u003e ((not (tbe in set exceptions_hd1_3b)) \u003d\u003e (tbe in set (dom asharp(\u003cONEPTHREE\u003e)))))))))","legal function application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 457:20: ((forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes)))))) \u003d\u003e pre_find_max_neq(pex, (rng exs~)))","type compatibility obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 94:35: (forall pes:DEFAULT`Pot_explosion_site \u0026 (forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 inv_Realp(0)))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 291:47: (forall site:(DEFAULT`Exposed_site | DEFAULT`Pot_explosion_site) \u0026 (forall i in set {1, ... ,4} \u0026 (i in set (dom next_point))))","legal map application obligation in \u0027DEFAULT\u0027 (ACSSL.vdmsl) at line 316:22: (forall pes:DEFAULT`Pot_explosion_site, exs:DEFAULT`Exposed_site \u0026 let d:DEFAULT`Metre \u003d shortest_dist(pes, exs), tbe:DEFAULT`Table_Co_ordinate \u003d table_entry(pes, exs) in ((\u003cONEPONE\u003e \u003d ((pes.mgzn).hzd)) \u003d\u003e ((not (tbe in set exceptions_hd1_1)) \u003d\u003e (\u003cONEPONE\u003e in set (dom asharp)))))"]