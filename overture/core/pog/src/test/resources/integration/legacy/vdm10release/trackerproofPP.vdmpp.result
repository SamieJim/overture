["type compatibility obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 72:15: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e inv_Phase(mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 78:16: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 ((source in set (dom phases)) \u003d\u003e (source in set (dom phases))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 62:23: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, ptoid:TRACKER`PhaseId, pfromid:TRACKER`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))","type invariant satisfiable obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 24:9: (exists p:TRACKER`Phase \u0026 (((card (p.contents)) \u003c\u003d (p.capacity)) and ((p.expected_materials) \u003c\u003e {})))","map compatible obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 42:17: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, quan:real, mat:TRACKER`Material \u0026 ((cid not in set (dom (trk.containers))) \u003d\u003e (forall ldom1 in set (dom (trk.containers)), rdom2 in set (dom {cid |-\u003e mk_Container(quan, mat)}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e ((trk.containers)(ldom1) \u003d {cid |-\u003e mk_Container(quan, mat)}(rdom2))))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 106:12: (forall containers:TRACKER`ContainerInfo, phases:TRACKER`PhaseInfo \u0026 (forall ph in set (rng phases) \u0026 (forall cid in set (ph.contents) \u0026 ((cid in set (dom containers)) \u003d\u003e (cid in set (dom containers))))))","type compatibility obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 60:15: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, ptoid:TRACKER`PhaseId, pfromid:TRACKER`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e inv_Phase(mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)))))","type compatibility obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 84:5: (forall tkr:TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (pre_Remove(tkr, cid, source) \u003d\u003e inv_Tracker(mk_Tracker(({cid} \u003c-: (tkr.containers)), (Remove(tkr, cid, source).phases)))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 73:22: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 53:10: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, dest:TRACKER`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (dest in set (dom phases)))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 60:24: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, ptoid:TRACKER`PhaseId, pfromid:TRACKER`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 72:24: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 61:23: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, ptoid:TRACKER`PhaseId, pfromid:TRACKER`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e (ptoid in set (dom (trk.phases)))))","legal function application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 85:16: (forall tkr:TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (pre_Remove(tkr, cid, source) \u003d\u003e pre_Remove(tkr, cid, source)))","legal function application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 65:14: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, ptoid:TRACKER`PhaseId, pfromid:TRACKER`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let pha:TRACKER`Phase \u003d mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)) in pre_Remove(trk, cid, pfromid)))","type compatibility obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 76:7: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e let pha:TRACKER`Phase \u003d mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)) in inv_Tracker(mk_Tracker(containers, (phases ++ {source |-\u003e pha})))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 99:33: (forall phases:TRACKER`PhaseInfo \u0026 (forall p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) \u003d\u003e (p2 in set (dom phases)))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 54:5: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, dest:TRACKER`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) \u003d\u003e (cid in set (dom containers))))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 99:7: (forall phases:TRACKER`PhaseInfo \u0026 (forall p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) \u003d\u003e (p1 in set (dom phases)))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 74:22: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, source:TRACKER`PhaseId \u0026 (((source in set (dom phases)) and (cid in set (phases(source).contents))) \u003d\u003e (source in set (dom phases))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 53:34: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, dest:TRACKER`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (dest in set (dom phases)))))","type invariant satisfiable obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 10:9: (exists mk_Tracker(containers, phases):TRACKER`Tracker \u0026 (Consistent(containers, phases) and (PhasesDistinguished(phases) and MaterialSafe(containers, phases))))","legal map application obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 54:37: (forall mk_Tracker(containers, phases):TRACKER`Tracker, cid:TRACKER`ContainerId, dest:TRACKER`PhaseId \u0026 ((cid in set (dom containers)) \u003d\u003e ((dest in set (dom phases)) \u003d\u003e (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) \u003d\u003e (dest in set (dom phases))))))","type compatibility obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 42:6: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, quan:real, mat:TRACKER`Material \u0026 ((cid not in set (dom (trk.containers))) \u003d\u003e inv_Tracker(mk_Tracker(((trk.containers) munion {cid |-\u003e mk_Container(quan, mat)}), (trk.phases)))))","type compatibility obligation in \u0027TRACKER\u0027 (trackerproofPP.vdmpp) at line 64:7: (forall trk:TRACKER`Tracker, cid:TRACKER`ContainerId, ptoid:TRACKER`PhaseId, pfromid:TRACKER`PhaseId \u0026 ((Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid)) \u003d\u003e let pha:TRACKER`Phase \u003d mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)) in inv_Tracker(mk_Tracker((trk.containers), ((Remove(trk, cid, pfromid).phases) ++ {ptoid |-\u003e pha})))))"]