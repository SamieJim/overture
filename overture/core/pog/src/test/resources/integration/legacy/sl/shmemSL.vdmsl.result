["non-empty sequence obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 110:9: (forall item:M`M, Q:M`Quadrant \u0026 (Q \u003c\u003e []))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 242:11: (forall tries:nat1, loops:nat1, oldstate:M`Memory \u0026 (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))))))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 71:24: (forall size:nat1, Q:M`Quadrant \u0026 ((not ([] \u003d Q)) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((not (((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003e\u003d size))) \u003d\u003e (QuadrantLen(size, Q) \u003e QuadrantLen(size, tail)))))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 164:17: (forall size:nat1, oldstate:M`Memory \u0026 let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 98:22: (forall Q:M`Quadrant \u0026 (exists [h1, h2] ^ tail:M`Quadrant \u0026 ((([h1, h2] ^ tail) \u003d Q) \u003d\u003e let [h1, h2] ^ tail \u003d Q in ((((h1.type) \u003d \u003cFREE\u003e) and ((h2.type) \u003d \u003cFREE\u003e)) \u003d\u003e inv_M(mk_M(\u003cFREE\u003e, (h1.start), (h2.stop)))))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 160:10: (forall size:nat1, oldstate:M`Memory \u0026 let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))","legal function application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 164:23: (forall size:nat1, oldstate:M`Memory \u0026 pre_add(size, q3, Q3))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 83:31: (forall size:nat1, hole:nat1, Q:M`Quadrant \u0026 ((hole \u003e\u003d size) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((not (((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003d hole))) \u003d\u003e (QuadrantLen2(size, hole, Q) \u003e QuadrantLen2(size, hole, tail)))))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 80:31: (forall size:nat1, hole:nat1, Q:M`Quadrant \u0026 ((hole \u003e\u003d size) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003d hole)) \u003d\u003e ((hole \u003d size) \u003d\u003e inv_M(mk_M(\u003cUSED\u003e, (h.start), (h.stop)))))))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 232:6: (forall tries:nat1, loops:nat1, oldstate:M`Memory \u0026 (true \u003d\u003e (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))))","legal function application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 83:31: (forall size:nat1, hole:nat1, Q:M`Quadrant \u0026 ((hole \u003e\u003d size) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((not (((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003d hole))) \u003d\u003e pre_add(size, hole, tail))))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 40:1: (forall m:M`M \u0026 ((((m.stop) - (m.start)) + 1) \u003e 0))","operation call obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 182:15: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e ((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 81:31: (forall size:nat1, hole:nat1, Q:M`Quadrant \u0026 ((hole \u003e\u003d size) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003d hole)) \u003d\u003e ((not (hole \u003d size)) \u003d\u003e (inv_M(mk_M(\u003cUSED\u003e, (h.start), (((h.start) + size) - 1))) and ((((h.start) + size) - 1) \u003e\u003d 0))))))))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 98:13: (forall Q:M`Quadrant \u0026 (exists [h1, h2] ^ tail:M`Quadrant \u0026 ((([h1, h2] ^ tail) \u003d Q) \u003d\u003e let [h1, h2] ^ tail \u003d Q in ((((h1.type) \u003d \u003cFREE\u003e) and ((h2.type) \u003d \u003cFREE\u003e)) \u003d\u003e (QuadrantLen0(Q) \u003e QuadrantLen0(([mk_M(\u003cFREE\u003e, (h1.start), (h2.stop))] ^ tail)))))))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 112:17: (forall item:M`M, Q:M`Quadrant \u0026 ((not ((hd Q) \u003d item)) \u003d\u003e (MQuadrantLen(item, Q) \u003e MQuadrantLen(item, (tl Q)))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 200:6: (forall loops:nat, oldstate:M`Memory \u0026 (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0))))","legal function application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 150:23: (forall size:nat1, oldstate:M`Memory \u0026 pre_add(size, q3, Q3))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 181:15: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))","legal sequence application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 185:13: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e (true \u003d\u003e (i in set (inds Q4))))","type invariant satisfiable obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 15:1: (exists mk_M(-, a, b):M`M \u0026 (b \u003e\u003d a))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 133:5: let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0))","while loop termination obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 196:3: ...","non-empty sequence obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 112:33: (forall item:M`M, Q:M`Quadrant \u0026 ((not ((hd Q) \u003d item)) \u003d\u003e (Q \u003c\u003e [])))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 135:1: (forall n:nat1, oldstate:M`Memory \u0026 (true \u003d\u003e (RESULT \u003e 0)))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 81:68: (forall size:nat1, hole:nat1, Q:M`Quadrant \u0026 ((hole \u003e\u003d size) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003d hole)) \u003d\u003e ((not (hole \u003d size)) \u003d\u003e ((((h.start) + size) - 1) \u003e\u003d 0)))))))","non-empty sequence obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 111:59: (forall item:M`M, Q:M`Quadrant \u0026 (((hd Q) \u003d item) \u003d\u003e (Q \u003c\u003e [])))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 119:1: (forall Q:M`Quadrant \u0026 (((card {x | x in set (elems Q) \u0026 ((x.type) \u003d \u003cFREE\u003e)}) - 1) \u003e\u003d 0))","operation call obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 199:11: (forall loops:nat, oldstate:M`Memory \u0026 ((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))))","legal sequence application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 180:13: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e (i in set (inds Q3)))","cases exhaustive obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 66:3: (forall size:nat1, Q:M`Quadrant \u0026 ((Q \u003d []) or (exists [h] ^ tail:M`Quadrant \u0026 (Q \u003d ([h] ^ tail)))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 171:3: let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 186:15: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0))))","legal sequence application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 186:28: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e (true \u003d\u003e (i in set (inds Q4))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 172:32: ((MAXMEM - 1) \u003e\u003d 0)","legal sequence application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 181:28: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e (i in set (inds Q3)))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 236:6: (forall tries:nat1, loops:nat1, oldstate:M`Memory \u0026 (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 241:11: (forall tries:nat1, loops:nat1, oldstate:M`Memory \u0026 (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 82:31: (forall size:nat1, hole:nat1, Q:M`Quadrant \u0026 ((hole \u003e\u003d size) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003d hole)) \u003d\u003e ((not (hole \u003d size)) \u003d\u003e inv_M(mk_M(\u003cFREE\u003e, ((h.start) + size), (h.stop)))))))))","while loop termination obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 211:3: ...","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 171:10: (inv_M(mk_M(\u003cFREE\u003e, 0, (MAXMEM - 1))) and ((MAXMEM - 1) \u003e\u003d 0))","state invariant satisfiable obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 21:7: (exists rseed:nat, Q3:M`Quadrant, Q4:M`Quadrant \u0026 (((len q3) \u003e 0) and ((len q4) \u003e 0)))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 172:3: let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 215:6: (forall loops:nat, oldstate:M`Memory \u0026 (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0))))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 56:24: (forall size:nat1, Q:M`Quadrant \u0026 ((not ([] \u003d Q)) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((not (((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003e\u003d size))) \u003d\u003e (QuadrantLen(size, Q) \u003e QuadrantLen(size, tail)))))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 171:32: ((MAXMEM - 1) \u003e\u003d 0)","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 172:10: (inv_M(mk_M(\u003cFREE\u003e, 0, (MAXMEM - 1))) and ((MAXMEM - 1) \u003e\u003d 0))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 239:11: (forall tries:nat1, loops:nat1, oldstate:M`Memory \u0026 (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e (true \u003d\u003e let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))))))","legal function application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 160:16: (forall size:nat1, oldstate:M`Memory \u0026 pre_add(size, q4, Q4))","operation call obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 187:15: (((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))) \u003d\u003e (true \u003d\u003e ((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e)))))","cases exhaustive obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 52:3: (forall size:nat1, Q:M`Quadrant \u0026 ((Q \u003d []) or (exists [h] ^ tail:M`Quadrant \u0026 (Q \u003d ([h] ^ tail)))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 111:17: (forall item:M`M, Q:M`Quadrant \u0026 (((hd Q) \u003d item) \u003d\u003e inv_M(mk_M(\u003cFREE\u003e, (item.start), (item.stop)))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 127:3: (forall n:nat1, oldstate:M`Memory \u0026 let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 70:41: (forall size:nat1, Q:M`Quadrant \u0026 ((not ([] \u003d Q)) \u003d\u003e (exists [h] ^ tail:M`Quadrant \u0026 ((([h] ^ tail) \u003d Q) \u003d\u003e let [h] ^ tail \u003d Q in ((((h.type) \u003d \u003cFREE\u003e) and (sizeof(h) \u003e\u003d size)) \u003d\u003e (QuadrantLen(size, Q) \u003e QuadrantLen(size, tail)))))))","non-empty sequence obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 99:31: (forall Q:M`Quadrant \u0026 (exists [h1, h2] ^ tail:M`Quadrant \u0026 ((([h1, h2] ^ tail) \u003d Q) \u003d\u003e let [h1, h2] ^ tail \u003d Q in ((not (((h1.type) \u003d \u003cFREE\u003e) and ((h2.type) \u003d \u003cFREE\u003e))) \u003d\u003e (Q \u003c\u003e [])))))","type compatibility obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 133:34: ((((rseed * 69069) + 5) mod 4294967296) \u003e\u003d 0)","legal function application obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 146:16: (forall size:nat1, oldstate:M`Memory \u0026 pre_add(size, q4, Q4))","recursive function obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 99:20: (forall Q:M`Quadrant \u0026 (exists [h1, h2] ^ tail:M`Quadrant \u0026 ((([h1, h2] ^ tail) \u003d Q) \u003d\u003e let [h1, h2] ^ tail \u003d Q in ((not (((h1.type) \u003d \u003cFREE\u003e) and ((h2.type) \u003d \u003cFREE\u003e))) \u003d\u003e (QuadrantLen0(Q) \u003e QuadrantLen0((tl Q)))))))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 150:17: (forall size:nat1, oldstate:M`Memory \u0026 let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))","non-empty sequence obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 112:12: (forall item:M`M, Q:M`Quadrant \u0026 ((not ((hd Q) \u003d item)) \u003d\u003e (Q \u003c\u003e [])))","state invariant holds obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 146:10: (forall size:nat1, oldstate:M`Memory \u0026 let mk_Memory(-, q3, q4) \u003d Memory in (((len q3) \u003e 0) and ((len q4) \u003e 0)))","operation call obligation in \u0027M\u0027 (shmemSL.vdmsl) at line 214:11: (forall loops:nat, oldstate:M`Memory \u0026 ((exists m in set (elems Q3) \u0026 ((m.type) \u003d \u003cUSED\u003e)) or (exists m in set (elems Q4) \u0026 ((m.type) \u003d \u003cUSED\u003e))))"]