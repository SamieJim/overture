["type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 170:41: (forall rml_id:nat, oldstate:Database`Kernel \u0026 is_(parms(2), Database`ListParameter))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 170:15: (forall rml_id:nat, oldstate:Database`Kernel \u0026 (exists mk_ListParameter(rmess):Database`Parameter \u0026 (mk_ListParameter(rmess) \u003d parms(2))))","legal sequence application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 199:46: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (3 in set (inds parms)))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 145:34: (forall rmv_id:nat, oldstate:Database`Kernel \u0026 is_(LookUpEntityInstance(rmv_id), Database`SimpleRecord))","enumeration map injectivity obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 211:14: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (forall m1, m2 in set {{\"FILE_NAME\" |-\u003e [mk_UnknownParameter()]}, {\"FILE_DESCRIPTION\" |-\u003e [mk_UnknownParameter()]}, {\"FILE_SCHEMA\" |-\u003e [mk_UnknownParameter()]}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4))))))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 153:34: (forall rme_id:nat, oldstate:Database`Kernel \u0026 is_(LookUpEntityInstance(rme_id), Database`SimpleRecord))","legal sequence application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 147:42: (forall rmv_id:nat, oldstate:Database`Kernel \u0026 (5 in set (inds parms)))","non-empty sequence obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 230:65: (forall ins:seq of (nat), lut:map (nat) to (nat) \u0026 ((not (ins \u003d [])) \u003d\u003e (ins \u003c\u003e [])))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 173:54: (forall rml_id:nat, oldstate:Database`Kernel \u0026 is_(rmes, Database`EntityInstanceName))","legal sequence application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 155:35: (forall rme_id:nat, oldstate:Database`Kernel \u0026 (3 in set (inds parms)))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 155:9: (forall rme_id:nat, oldstate:Database`Kernel \u0026 (exists mk_ListParameter(rmees):Database`Parameter \u0026 (mk_ListParameter(rmees) \u003d parms(3))))","legal map application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 230:35: (forall ins:seq of (nat), lut:map (nat) to (nat) \u0026 ((not (ins \u003d [])) \u003d\u003e ((hd ins) in set (dom lut))))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 173:21: (forall rml_id:nat, oldstate:Database`Kernel \u0026 (exists mk_EntityInstanceName(rmes_id):Database`Parameter \u0026 (mk_EntityInstanceName(rmes_id) \u003d rmes)))","non-empty sequence obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 230:42: (forall ins:seq of (nat), lut:map (nat) to (nat) \u0026 ((not (ins \u003d [])) \u003d\u003e (ins \u003c\u003e [])))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 197:20: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (exists mk_SimpleRecord(-, parms):[Database`Record] \u0026 (mk_SimpleRecord(any1, parms) \u003d LookUpEntityInstance(ent))))","map compatible obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 196:31: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (forall ldom1 in set (dom LookUpTable), rdom2 in set (dom {ent |-\u003e last_id}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (LookUpTable(ldom1) \u003d {ent |-\u003e last_id}(rdom2)))))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 169:15: (forall rml_id:nat, oldstate:Database`Kernel \u0026 (exists mk_SimpleRecord(-, parms):[Database`Record] \u0026 (mk_SimpleRecord(any1, parms) \u003d LookUpEntityInstance(rml_id))))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 145:7: (forall rmv_id:nat, oldstate:Database`Kernel \u0026 (exists mk_SimpleRecord(-, parms):[Database`Record] \u0026 (mk_SimpleRecord(any1, parms) \u003d LookUpEntityInstance(rmv_id))))","legal map application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 138:27: (forall ein:nat, oldstate:Database`Kernel \u0026 (ein in set (dom (in_model.datasec))))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 147:9: (forall rmv_id:nat, oldstate:Database`Kernel \u0026 (exists mk_EntityInstanceName(cpnt_id):Database`Parameter \u0026 (mk_EntityInstanceName(cpnt_id) \u003d parms(5))))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 159:13: (forall rme_id:nat, oldstate:Database`Kernel \u0026 (exists mk_EntityInstanceName(rmee_id):Database`Parameter \u0026 (mk_EntityInstanceName(rmee_id) \u003d rmee)))","recursive function obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 230:51: (forall ins:seq of (nat), lut:map (nat) to (nat) \u0026 ((not (ins \u003d [])) \u003d\u003e (LenPar1(ins, lut) \u003e LenPar1((tl ins), lut))))","let be st existence obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 241:25: (forall theSet:set of (seq of (nat)) \u0026 ((not ({} \u003d theSet)) \u003d\u003e (exists e in set theSet \u0026 true)))","let be st existence obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 277:14: (forall theSet:set of ((nat * nat)) \u0026 (exists mk_(a, b) in set theSet \u0026 true))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 169:42: (forall rml_id:nat, oldstate:Database`Kernel \u0026 is_(LookUpEntityInstance(rml_id), Database`SimpleRecord))","legal sequence application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 170:41: (forall rml_id:nat, oldstate:Database`Kernel \u0026 (2 in set (inds parms)))","map compatible obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 198:24: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (forall ldom1 in set (dom ds), rdom2 in set (dom {last_id |-\u003e mk_(nil, mk_SimpleRecord(\"VERTEX\", [parms(3)]))}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (ds(ldom1) \u003d {last_id |-\u003e mk_(nil, mk_SimpleRecord(\"VERTEX\", [parms(3)]))}(rdom2)))))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 155:35: (forall rme_id:nat, oldstate:Database`Kernel \u0026 is_(parms(3), Database`ListParameter))","recursive function obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 241:58: (forall theSet:set of (seq of (nat)) \u0026 ((not ({} \u003d theSet)) \u003d\u003e (forall e in set theSet \u0026 (SetCard(theSet) \u003e SetCard((theSet \\ {e}))))))","let be st existence obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 271:18: (forall theSet:set of ((nat * nat)), goal:nat \u0026 ((not ({} \u003d theSet)) \u003d\u003e (exists mk_(a, b) in set theSet \u0026 (b \u003d goal))))","legal map application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 126:24: (forall nm:seq of (char), oldstate:Database`Kernel \u0026 (ein in set (dom (in_model.datasec))))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 147:42: (forall rmv_id:nat, oldstate:Database`Kernel \u0026 is_(parms(5), Database`EntityInstanceName))","map compatible obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 203:22: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (forall ldom1 in set (dom ds), rdom2 in set (dom {last_id |-\u003e mk_(nil, mk_SimpleRecord(\"POLYLINE\", [mk_ListParameter(MapInToOut(poly, LookUpTable))]))}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (ds(ldom1) \u003d {last_id |-\u003e mk_(nil, mk_SimpleRecord(\"POLYLINE\", [mk_ListParameter(MapInToOut(poly, LookUpTable))]))}(rdom2)))))","let be st existence obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 262:18: (forall theSet:set of ((nat * nat)), goal:nat \u0026 ((not ({} \u003d theSet)) \u003d\u003e (exists mk_(a, b) in set theSet \u0026 (a \u003d goal))))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 159:46: (forall rme_id:nat, oldstate:Database`Kernel \u0026 is_(rmee, Database`EntityInstanceName))","value binding obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 153:7: (forall rme_id:nat, oldstate:Database`Kernel \u0026 (exists mk_SimpleRecord(-, parms):[Database`Record] \u0026 (mk_SimpleRecord(any1, parms) \u003d LookUpEntityInstance(rme_id))))","legal map application obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 112:11: (forall eid:nat, oldstate:Database`Kernel \u0026 (ein in set (dom (in_model.datasec))))","type compatibility obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 197:47: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 is_(LookUpEntityInstance(ent), Database`SimpleRecord))","map compatible obligation in \u0027Database\u0027 (expressSL.vdmsl) at line 208:18: (forall AbstrMod:set of (seq of (nat)), oldstate:Database`Kernel \u0026 (forall ldom1 in set (dom ds), rdom2 in set (dom {(last_id + 1) |-\u003e mk_(nil, mk_SimpleRecord(\"DRAWING\", [mk_ListParameter(polylist)]))}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (ds(ldom1) \u003d {(last_id + 1) |-\u003e mk_(nil, mk_SimpleRecord(\"DRAWING\", [mk_ListParameter(polylist)]))}(rdom2)))))"]