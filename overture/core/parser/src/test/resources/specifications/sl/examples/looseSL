

--as.vdmsl

\section{The Abstract Syntax}

The abstract syntax presented in this section is a simplified subset
of the outer abstract syntax from the draft VDM-SL Standard
\cite{ISOVDM93}.

\subsection{Definitions}

In this paper we only consider value definitions and explicit
function definitions.

\begin{vdm_al}


-----------------------------------------------------------------------
------------------- Abstract Syntax Definitions -----------------------
-----------------------------------------------------------------------

types


-----------------------------------------------------------------------
-------------------------- Definitions --------------------------------
-----------------------------------------------------------------------

Definitions :: valuem : seq of ValueDef
               fnm : map Name to ExplFnDef;

\end{vdm_al}

\subsection{Value Definitions}

The value definitions simply consist of a left hand side pattern and
a right hand side expression.

\begin{vdm_al}

-----------------------------------------------------------------------
-------------------------- Value Definitions --------------------------
-----------------------------------------------------------------------

ValueDef :: pat : Pattern                                     
            val : Expr;
\end{vdm_al}

\subsection{Function Definitions}

The abstract syntax of a function which are needed for the looseness
analysis here is composed of the name of the function, the argument pattern
and the body expression. Thus, information such as the type of the
function is not needed in this context.

\begin{vdm_al}
-----------------------------------------------------------------------
-------------------------- Functions Definitions ----------------------
-----------------------------------------------------------------------

ExplFnDef :: nm      : Name
             pat     : Pattern
             body    : Expr;
\end{vdm_al}

\subsection{Expressions}

The expressions which are used in this paper are restricted to let
expressions (including let-be-such-that expressions), conditional
expressions, apply expressions (only for function application),
literals, names, bracketed expressionsa nd (a few) binary expressions.
These expressions have been selected because they are sufficient to
show the principles in the loose evaluation presented in this paper.

\begin{vdm_al}
-----------------------------------------------------------------------
-------------------------- Expressions --------------------------------
-----------------------------------------------------------------------

Expr = LetExpr | LetBeSTExpr| IfExpr | CasesExpr |
       UnaryExpr | BinaryExpr | SetEnumerationExpr |
       ApplyExpr | Literal | Name | BracketedExpr ;            


BracketedExpr :: expr : Expr;

LetExpr :: lhs   : Pattern
           rhs   : Expr
           body  : Expr;

LetBeSTExpr :: lhs : Bind                                     
               St  : Expr
               In  : Expr;

IfExpr :: test   : Expr                                          
          cons   : Expr
          altn   : Expr;

CasesExpr :: sel    : Expr
             altns  : seq of CaseAltn 
             Others : [Expr];

CaseAltn :: match : Pattern
            body  : Expr;

UnaryExpr  :: opr : UnaryOp
              arg : Expr;

UnaryOp = <NUMMINUS>;

BinaryExpr :: left  : Expr
              opr   : BinaryOp
              right : Expr;

BinaryOp = <EQ> | <NUMPLUS> | <NUMMINUS> | <NUMMULT> | <SETMINUS> ;

SetEnumerationExpr :: els : seq of Expr;

ApplyExpr :: fct : Name
             arg : Expr;

Name :: ids : seq of Id;

Id = seq of char;
\end{vdm_al}

\subsection{Patterns and Binds}

The patterns used in this paper are pattern identifiers (notice here
how the position of the pattern has been incorporated as
well\footnote{We will see later why this is essential, even though any
other unique identification of the pattern name could be used.}), and
set patterns (for set enumeration and set union patterns). For
bindings we are only considering set bindings because we only
investigate an executable subset of VDM-SL here.

\begin{vdm_al}
-----------------------------------------------------------------------
-------------------- Patterns and Bindings ----------------------------
-----------------------------------------------------------------------

Pattern = PatternName | MatchVal | SetPattern;

PatternName :: nm : [(Name * Position)];

MatchVal :: val : Expr;

SetPattern = SetEnumPattern | SetUnionPattern;

SetEnumPattern :: Elems : seq of Pattern;

SetUnionPattern :: lp : Pattern
                   rp : Pattern;

Position = nat * nat;

Bind = SetBind;

SetBind :: pat : Pattern
           Set : Expr;
\end{vdm_al}

Only set bindings are considered.

\subsection{Literals}

We have chosen only to have numerical and boolean literals in this
paper.

\begin{vdm_al}
-----------------------------------------------------------------------
-------------------- Literals -----------------------------------------
-----------------------------------------------------------------------

Literal = BoolLit | NumLit;

BoolLit:: val : bool;

NumLit :: val : int

values

 pat : Pattern = mk_PatternName(mk_(mk_Name(["x"]),mk_(1,1)));
 
 sexpr : Expr = mk_SetEnumerationExpr([mk_NumLit(1),mk_NumLit(2)]);
 expr : Expr = mk_LetBeSTExpr(mk_SetBind(pat,sexpr), 
                              mk_BoolLit(true), 
                              mk_Name(["x"]));
                              
 expr2 : Expr = mk_BinaryExpr(expr, <NUMPLUS>, expr);

\end{vdm_al}


--auxil.vdmsl

\section{Auxiliary Functions}

This section contains a number of auxiliary functions and operations.

\begin{vdm_al}

operations

SeqOfSetOf2SetOfSeqOf : seq of set of (VAL | BlkEnv) ==> 
                        set of seq of (VAL | BlkEnv)
SeqOfSetOf2SetOfSeqOf(seq_ls) ==
( dcl res_s : set of seq of (VAL | BlkEnv) := { [] } ,
      tmpres_s : set of seq of (VAL | BlkEnv) ;
  for tmp_s in seq_ls do 
  ( tmpres_s := {} ;
    for all tmp_l in set res_s do
      for all e in set tmp_s do
        tmpres_s := tmpres_s union { tmp_l ^ [ e ] } ;
    res_s := tmpres_s 
  );
  return res_s
)
\end{vdm_al}
$SeqOfSetOf2SetOfSeqOf$ transforms a sequence of sets to a set of
sequences.

\begin{vdm_al}
functions

  Consistent: LVAL * Model -> LVAL
  Consistent(lval,bind) ==
    {mk_(val,b munion bind)
    | mk_(val,b) in set lval &
      forall id in set (dom b inter dom bind) &
             b(id) = bind(id)};
\end{vdm_al}
The $Consistent$ function is very important because it precisely
specifies which parts of a loose value are ``consistent'' with a
given model. The point is that when one are not taking the binding of
the formal parameters of functions into the model then the consistency
check is simply that those unique identifiers which are present in a
loose value pair and also in the given model must match the same
chosen value (i.e.\ the choices may not be inconsistent). This is a
sufficient condition because the identifiers uniquely identify in
which context the choice is made.

\begin{vdm_al}
  SetToSeq: set of VAL +> seq of VAL
  SetToSeq(s) ==
    if s = {}
    then []
    else let e in set s
         in
           [e] ^ SetToSeq(s\{e})
 post s = elems RESULT;
\end{vdm_al}
$SetToSeq$ transforms a set of values to a sequence of values (in
an arbitrary order). 

\begin{vdm_al}

  Permute: seq of VAL -> set of seq of VAL
  Permute(l) ==
    cases l:
      [],
      [-]    -> { l },
      others -> dunion { { [ l(i) ] ^ j | j in set Permute(RestSeq(l, i))} | 
                           i in set inds l }
    end;
    
  RestSeq: seq of VAL * nat1 -> seq of VAL
  RestSeq(l,i) ==
    [ l(j) | j in set (inds l \ { i }) ];
\end{vdm_al}
$Permute$ and $RestSeq$ takes care of generating a set of all
permutations of the given sequence of values.

\begin{vdm_al}
  PatternIds: Pattern +> set of UniqueId
  PatternIds(pat) ==
    cases pat:
      mk_PatternName(mk_(nm,pos)) -> {mk_(nm,pos,FnInfo())},
      mk_MatchVal(-)              -> {},
      mk_SetEnumPattern(els)      -> dunion {PatternIds(elem)
                                            |elem in set elems els},
      mk_SetUnionPattern(lp,rp)   -> PatternIds(lp) union
                                     PatternIds(rp)
    end
\end{vdm_al}
This auxiliary function is used to find the set of unique identifiers
from a pattern.


\section{Test Coverage}

The specification have been tested. The coverage of the tests which
have been used can be presented as:

%\begin{rtinfo}[LooseEvalSetEnumerationExpr]
%{loose}[DefaultMod]
%\end{rtinfo}

Notice that all constructs in the entire specification have been
covered. This would not have been the case if the test suite have not
been run with pre and post condition checking switched on. Thus, we
feel that we can have a reasonable amount of confidence in the
correctness of the specification. Under ``normal'' circumstances (at
least in our own work) this would be the place where one would explain
about why certain parts of the specification had not been fully
covered. 



--env.vdmsl

\section{The Environment Context}

In order for the loose evaluation to take place, the context in
which the expression is to be evaluated must be
initialized and maintained. This is taken care of by the definitions
presented in this section.

\subsection{The Evaluation Stack}

The semantic domains describe the type of the structure which will be
used for specifying the operational (loose) semantics for the abstract
syntax.

\begin{vdm_al}
types

  ENVL = seq of ENV;
\end{vdm_al}

The main structure in the semantic domains is the environment, {\it
ENVL} which is organized as a stack of so-called function application
environments {\it ENV}. When a function is called, it must establish a
local environment containing its own definitions such as the formal
parameters.

\begin{vdm_al}
  ENV = seq of BlkEnv;
\end{vdm_al}
Expressions can define a local environment called a block environment
$BlkEnv$. For example a let expression will produce a local
environment for which the scope is the body of the let-expression. The
function application environment is therefore organized as a stack of
block environments where the first block environment pushed on the
stack contains the instantiation of the formal parameters. When the
value of an identifier is looked up this will happen in a top-down
manner down through the block environments.
\begin{vdm_al}
  BlkEnv = seq of NameVal;
\end{vdm_al}
Finally a block environment is a sequence of {\it NameVal}s, each
containing a unique identifier and its associated value. A {\it BlkEnv}
could alternatively be modelled as a map. We have chosen to use a sequence 
in order to keep it in line with the operational dynamic semantics
presented in \cite{Larsen&91}.
\begin{vdm_al}
  NameVal = UniqueId * VAL;

  UniqueId = (Name * Position * ([Name * VAL]));
\end{vdm_al}
The unique names which are used here deserve a little additional explanation.
The unique name contains the actual name (from a pattern identifier),
the position (of the pattern identifier\footnote{As already mentioned
this could in principle simply be any other unique identification of
the occurence of the name.}) and if the binding takes
place inside the body of a function, the function name and the argument (value) to
the function are added (otherwise \kw{nil} is used).
This corresponds to the dynamic tagging
information used in \cite{Larsen93b}.

\subsection{Semantic Values}\label{semantic}

\begin{vdm_al}
  LVAL = set of (VAL * Model);
\end{vdm_al}
The ``loose values'' returned by the loose expression evaluation functions
is a set of pairs. The first element of such a pair is the value of
the expression in the model described by the second element of the
pair. Thus, one gets information about both external looseness (where
different models yields different results) and internal looseness
(where each model yield the same result).

\begin{vdm_al}
  Model = map UniqueId to VAL;
\end{vdm_al}
A model contains a precise description of all the choices made
underway in the loose evaluation of an expression. In this paper the
values considered are simply numerical values, Boolean values and set
values. 
\begin{vdm_al}
  VAL = NUM | BOOL | SET;

  NUM :: v : int;

  BOOL :: v : bool;

  SET :: v : set of VAL

\end{vdm_al}

\subsection{The State Definition}

The state of this specification contains the environment described
above, $env-l$, and additionally some information about the context of the
expression (i.e.\ the value definitions, $val-m$, and function
definitions, $fn-m$ it
may make use of). The {\it curfn} component indicates whether we
are currently evaluating an expression in the body of some
function\footnote{Note that we could also be evaluating a value expression.}.
If this is the case, information about the function name and the
argument value needs to be added to the unique identifiers which are
created when new pattern identifiers are encountered. Finally the {\it
fnparms} component contains the unique identification of the parameters
of the functions. This information is important because the binding of
these formal parameters do not constitute any input to the models.
Thus, the binding of the formal parameters must {\bf not} be taken
into account in the choices taken in a given model. The reason for
this will be clear at the end of the next section.

\begin{vdm_al}
state Sigma of
  env_l: ENVL
  val_m: map UniqueId to LVAL
  fn_m: map Name to (Pattern * Expr)
  curfn: seq of (Name * VAL)
  fnparms: set of UniqueId
init s ==
  s = mk_Sigma([[]],
               {|->},
               {|->},
               [],
	       {})
end

\end{vdm_al}

\subsection{Creation of Context}

In order to be able to use value and function definitions in the
expressions we would like to analyse this subsection contains a small
operation which create the context and thereby initialize the state
components accordingly.

\begin{vdm_al}
operations

  CreateContext: Definitions ==> ()
  CreateContext(mk_Definitions(valuem,fnm)) ==
    (InstallValueDefs(valuem);
     InstallFnDefs(fnm));
\end{vdm_al}

\subsection{Value Definitions handling}

For value definitions it is taken into account that looseness can
arise both on the right hand side expression and on the left hand side
pattern (matching). This is done below and the state component {\it
val\_l} is initialized.

\begin{vdm_al}
  InstallValueDefs: seq of ValueDef ==> ()
  InstallValueDefs(val_l) ==
    for mk_ValueDef(pat,expr) in val_l do
      let lval = LooseEvalExpr(expr)
      in
        for all mk_(val,model) in set lval do
	  let env_s = PatternMatch(pat,val)
	  in
	    val_m := Extend(val_m,
	             {id |-> {mk_(Look(env,id),model)|env in set env_s}
		     | id in set dinter {SelDom(env)| env in set env_s}});

\end{vdm_al}

\subsection{Function Definitions handling}

This subsection contains functions which manipulate the state
components which are affected by function definitions.
\begin{vdm_al}

  InstallFnDefs: map Name to ExplFnDef ==> ()
  InstallFnDefs(fn_marg) ==
    fn_m := {nm |-> mk_(fn_marg(nm).pat,fn_marg(nm).body)
            | nm in set dom fn_marg};

  InstallCurFn: Name * VAL * set of UniqueId ==> ()
  InstallCurFn(nm,val,patids) ==
   (curfn := [mk_(nm,val)] ^ curfn;
    fnparms := fnparms union patids);

  LeaveCurFn: () ==> ()
  LeaveCurFn() ==
    curfn := tl curfn
  pre curfn <> []

\end{vdm_al}

\subsection{Stack Manipulating Functions}

This subsection contains a number of simple auxiliary operations which
manipulate the environment. These are mainly operations for popping
and pushing various kinds of environments, but also operations for
manipulating environments and looking up bindings in environments.

\begin{vdm_al}
operations

  PopEnvL: () ==> ()
  PopEnvL() ==
    env_l := tl env_l;

  TopEnvL : () ==> ENV
  TopEnvL () ==
    return hd env_l;

  PushEmptyEnv : () ==> ()
  PushEmptyEnv () ==
    env_l := [ [] ] ^ env_l;

  PopBlkEnv : () ==> ()
  PopBlkEnv () ==
    env_l := [ tl hd env_l ] ^ tl env_l;

  PushBlkEnv : BlkEnv ==> ()
  PushBlkEnv (benv) ==
    env_l := [ [ benv ] ^ hd env_l ] ^ tl env_l;

  MkEmptyBlkEnv: () ==> BlkEnv
  MkEmptyBlkEnv() ==
    return [];

  CombineBlkEnv : BlkEnv * BlkEnv ==> BlkEnv
  CombineBlkEnv ( env1,env2) ==
    return env1 ^ env2;
    
  MkBlkEnv : (Name * Position) * VAL ==> BlkEnv
  MkBlkEnv (mk_(nm,pos), val_v ) ==
    let fninfo = FnInfo()
    in
      return [ mk_(mk_(nm, pos, fninfo), val_v)];

  FnInfo: () ==> [Name * VAL]
  FnInfo() ==
    if len curfn = 0
    then return nil
    else return hd curfn;
	   
  LooseLookUp: Name ==> LVAL
  LooseLookUp(nm) ==
  (let topenv = TopEnvL()
   in
     for env in topenv do
       for mk_(id,val) in env do
         if SelName(id) = nm 
	 then return {mk_(val, if id in set fnparms
	                       then {|->}
			       else {id |-> val})}
	 else skip;
   LookUpValueDefs(nm));

  LookUpValueDefs: Name ==> LVAL
  LookUpValueDefs(nm) ==
    (for all id in set dom val_m do
      if SelName(id) = nm
      then return {mk_(v,m munion {id |-> v}) | mk_(v,m) in set val_m(id)};
     error); 

  LookUpFn: Name ==> Pattern * Expr
  LookUpFn(nm) ==
    return fn_m(nm)
  pre nm in set dom fn_m

functions

  SelName: UniqueId +> Name
  SelName(mk_(nm,-,-)) ==
    nm;
    
  SelNameAndPos: UniqueId +> Name * Position
  SelNameAndPos(mk_(nm,pos,-)) ==
    mk_(nm,pos);

  SelDom: BlkEnv +> set of UniqueId
  SelDom(blkenv) ==
    {id| mk_(id,-) in set elems blkenv};

  Look: BlkEnv * UniqueId +> VAL
  Look(env,id) ==
    if env = []
    then undefined
    else let mk_(nm,val) = hd env
         in
	   if nm = id
	   then val
	   else Look(tl env, id)
  pre exists mk_(nm,-) in set elems env & nm = id;

  Extend: (map UniqueId to LVAL) * (map UniqueId to LVAL) +>
          (map UniqueId to LVAL)
  Extend(val_m,upd_m) ==
    val_m ++ {id |-> if id in set dom val_m
                     then val_m(id) union upd_m(id)
		     else upd_m(id)
	     | id in set dom upd_m}
    
\end{vdm_al}


--expr.vdmsl

\section{Loose Expression Evaluation}

The loose expression evaluation operations which are presented in this
section takes a syntactic expression and yields a ``loose value''. This
loose value is a set of pairs with a return value and its
corresponding model as explained in Section~\ref{semantic}.

The general strategy behind the loose evaluation of expressions is
that whenever an syntactic expression contains more than one
subexpression the loose values from these subexpressions are
combined such that only ``consistent'' models are considered. In addition
it should be noticed that {\it PatternMatch} operation
which performs matching
of a syntactic pattern to a value yields the set of all possible
bindings of the pattern identifiers in case of looseness.

\begin{vdm_al}

operations

  LooseEvalExpr: Expr ==> LVAL
  LooseEvalExpr(expr) ==
    cases true :
     (is_LetExpr(expr))                  -> LooseEvalLetExpr(expr),
     (is_LetBeSTExpr(expr))              -> LooseEvalLetBeSTExpr(expr),
     (is_IfExpr(expr))                   -> LooseEvalIfExpr(expr),
     (is_CasesExpr(expr))                -> LooseEvalCasesExpr(expr),
     (is_BinaryExpr(expr))               -> LooseEvalBinaryExpr(expr),
     (is_SetEnumerationExpr(expr))       -> LooseEvalSetEnumerationExpr(expr),
     (is_ApplyExpr(expr))                -> LooseEvalApplyExpr(expr),
     (is_NumLit(expr)),
     (is_BoolLit(expr))                  -> LooseEvalLiteral(expr),
     (is_Name(expr))                     -> LooseLookUp(expr),
     (is_BracketedExpr(expr))            -> LooseEvalBracketedExpr(expr),
     others                              -> error
    end;

  LooseEvalBracketedExpr : BracketedExpr ==> LVAL
  LooseEvalBracketedExpr (mk_BracketedExpr(expr)) ==
    LooseEvalExpr(expr);
\end{vdm_al}

\subsection{Let Expressions}

\begin{vdm_al}
  LooseEvalLetExpr : LetExpr ==> LVAL
  LooseEvalLetExpr ( mk_LetExpr(pat,expr,in_e)) ==
  ( dcl lval: LVAL := {};

    let val_lv = LooseEvalExpr(expr) in
     for all mk_(val_v,m) in set val_lv do
       let env_s = PatternMatch(pat,val_v) in
         if env_s <> {}
         then for all env in set env_s do
	       (PushBlkEnv(env) ;
                let in_lv = LooseEvalExpr(in_e) in
                ( PopBlkEnv() ;
                  lval := lval union Consistent(in_lv,m)
                )
              )
         else error;
  return lval);
\end{vdm_al}
Here in {\it LooseEvalLetExpr} it can be seen how the right-hand-side expression,
{\it expr} is evaluated first. For each of the loose value pairs
(value and corresponding model) the value is matched against the
pattern and given that this succeeds ($env-s \Neq \Emptyset$) the
in-expression is evaluated in a context where each of the bindings from the
pattern matching is visible (by $PushBlkEnv$). The loose value pairs which are
consistent with the model for the loose value pair of the first
expression are added to the resulting loose value for the entire
let-expression.

\begin{vdm_al}
  LooseEvalLetBeSTExpr : LetBeSTExpr ==> LVAL
  LooseEvalLetBeSTExpr ( mk_LetBeSTExpr(lhs, st_e, in_e)) ==
   (dcl lval : LVAL := {};
    dcl em_s: set of (BlkEnv * Model) := {};
    
    for all mk_(env,m) in set EvalBind(lhs) do 
    (PushBlkEnv(env);
     let st_lv = LooseEvalExpr(st_e) in
       for all mk_(val,m2) in set Consistent(st_lv,m) do
         if val = mk_BOOL(true)
	 then em_s := em_s union {mk_(env,m2 munion m)};
    PopBlkEnv());
    if em_s <> {}
    then for all mk_(env,m3) in set em_s do
          (PushBlkEnv(env) ;
           let in_lv = LooseEvalExpr(in_e) in
             (PopBlkEnv();
              lval := lval union Consistent(in_lv,m3)
             )
          )
    else error;
    return lval);
\end{vdm_al}
For let-be-such-that expressions all possible environments arising
from matching the left-hand-side (set) binding are taken into account
(with the corresponding models). If there is an additional
``such-that'' predicate it is evaluated where one of these
environments are in context. The consistent loose values from the
predicate must then be tested whether they yield true. For all such
loose values the corresponding environment is put in context for
evaluation of the body expression, where the consistency again must be
ensured. 

\subsection{Conditional Expressions}

\begin{vdm_al}
  LooseEvalIfExpr : IfExpr ==> LVAL
  LooseEvalIfExpr(mk_IfExpr (test, cons, altn)) ==
  (dcl lval : set of (VAL * Model) := {};
  
  let test_lv = LooseEvalExpr(test) in
   for all mk_(test_v,m) in set test_lv do
    if is_BOOL(test_v)
    then let mk_BOOL(b) = test_v in
         if b
         then lval := lval union Consistent(LooseEvalExpr(cons),m)
         else lval := lval union Consistent(LooseEvalExpr(altn),m)
    else error;
  return lval);
\end{vdm_al}

Conditional expressions are relatively simple because it simply is all
loose values from the evaluation of the test expression which must be
to calculate the consistent loose values from the consequence
expression or the alternative expression (depending upon the the value
of the test expression in a particular model).

\begin{vdm_al}
  LooseEvalCasesExpr: CasesExpr ==> LVAL
  LooseEvalCasesExpr (mk_CasesExpr(sel,altns,Others)) ==
  (dcl lval : set of (VAL * Model) := {},
       alt_l : seq of CaseAltn := altns,
       cont : bool := true;

   let sel_lv = LooseEvalExpr(sel)
   in
     for all mk_(sel_v,m) in set sel_lv do
       (while alt_l <> [] and cont do
        (let mk_CaseAltn(pat,body) = hd alt_l
	 in
	   let env_s = PatternMatch(pat,sel_v)
	   in
	     if env_s <> {}
	     then (cont := false;
	           for all env in set env_s do
	            (PushBlkEnv(env);
	             lval := lval union Consistent(LooseEvalExpr(body),m);
		     PopBlkEnv()));
	 alt_l := tl alt_l);
      if not cont
      then cont := true
      elseif Others = nil
      then error
      else lval := lval union LooseEvalExpr(Others));
    return lval);
\end{vdm_al}
For cases expressions all loose values from the evaluation of the
selector expression are used for further matching against the patterns
in the different case alternatives. When a matching pattern is found
all the matching environments are used as context for the body of the
case alternative. If none of the alternatives matches an others clause
must be present.

\subsection{Binary Expressions}

\begin{vdm_al}
  LooseEvalBinaryExpr: BinaryExpr ==> LVAL
  LooseEvalBinaryExpr (mk_BinaryExpr(left_e, opr, right_e)) ==
    let left_lv  = LooseEvalExpr(left_e),
        right_lv = LooseEvalExpr(right_e)
    in
      if opr = <SETMINUS>
      then LooseEvalSetBinaryExpr(left_lv, right_lv)
      elseif opr = <EQ>
      then LooseEvalEqBinaryExpr(left_lv, right_lv)
      else LooseEvalNumBinaryExpr(left_lv, opr, right_lv);
\end{vdm_al}

Since all the binary operators we have selected in our subset are
strict (we have not included any of the logical connectives) we can
safely evaluate both the of the operands to the binary operator. The
actual work is done by seperate auxiliary functions (one for set
difference, one for equality and one for the remaining numerical
operators which are included).

\begin{vdm_al}
  LooseEvalSetBinaryExpr: LVAL * LVAL ==> LVAL
  LooseEvalSetBinaryExpr(l_lv, r_lv) ==
   (dcl lval : LVAL := {};
    for all mk_(mk_SET(lv),lm) in set l_lv do
      for all mk_(mk_SET(rv),rm) in set Consistent(r_lv,lm) do
        lval := lval union {mk_(mk_SET(lv \ rv),rm munion lm)};
    return lval)
  pre forall mk_(v,-) in set l_lv union r_lv & is_SET(v);

  LooseEvalEqBinaryExpr: LVAL * LVAL ==> LVAL
  LooseEvalEqBinaryExpr(l_lv, r_lv) ==
   (dcl lval : LVAL := {};
    for all mk_(lv,lm) in set l_lv do
      for all mk_(rv,rm) in set Consistent(r_lv,lm) do
        lval := lval union {mk_(mk_BOOL(lv = rv),rm munion lm)};
    return lval);

  LooseEvalNumBinaryExpr: LVAL * BinaryOp * LVAL ==> LVAL
  LooseEvalNumBinaryExpr(l_lv, opr, r_lv) ==
   (dcl lval : LVAL := {};
    for all mk_(mk_NUM(lv),lm) in set l_lv do
      for all mk_(mk_NUM(rv),rm) in set Consistent(r_lv,lm) do
        cases opr:
          <NUMMINUS> -> lval := lval union {mk_(mk_NUM(lv - rv),rm munion lm)},
          <NUMPLUS>  -> lval := lval union {mk_(mk_NUM(lv + rv),rm munion lm)},
          <NUMMULT>  -> lval := lval union {mk_(mk_NUM(lv * rv),rm munion lm)}
    end;
    return lval)
  pre forall mk_(v,-) in set l_lv union r_lv & is_NUM(v);
\end{vdm_al}

\subsection{Set Enumeration Expressions}

\begin{vdm_al}
  LooseEvalSetEnumerationExpr: SetEnumerationExpr ==> LVAL
  LooseEvalSetEnumerationExpr(mk_SetEnumerationExpr(els)) ==
    (dcl sm_s : set of ((set of VAL) * Model) := {};

     if len els = 0
     then return {mk_(mk_SET({}),{|->})}
     else (sm_s := {mk_({elem},m) | mk_(elem,m) in set LooseEvalExpr(els(1))};
     
           for index = 2 to len els do
            let elm_llv = LooseEvalExpr(els(index)) in
              sm_s := {mk_(s union {e},m munion m2)
	              | mk_(s,m) in set sm_s, mk_(e,m2) in set elm_llv &
		        forall id in set (dom m inter dom m2) &
			m(id) = m2(id)};
           return {mk_(mk_SET(s),m) | mk_(s,m) in set sm_s})); 
\end{vdm_al}
For set enumeration expressions it is first tested whether we are
dealing with an empty set. Otherwise a set of loose values are created
with pairs of a singleton set with the first element and its
corresponding model. This set of loose values is then gradually
updated to include larger set values and larger corresponding models
(with the usual consistency check).

\subsection{Function Application Expressions}

\begin{vdm_al}
  LooseEvalApplyExpr: ApplyExpr ==> LVAL
  LooseEvalApplyExpr(mk_ApplyExpr(fct_e, arg_e)) ==
   (dcl lval: LVAL := {};
   
    let arg_lv = LooseEvalExpr(arg_e),
        mk_(pat,body) = LookUpFn(fct_e)
    in
     (PushEmptyEnv();
      for all mk_(arg_v,m) in set arg_lv do
        let env_s = PatternMatch(pat,arg_v)
	in
	  (InstallCurFn(fct_e, arg_v, PatternIds(pat));
	   for all env in set env_s do
	     (PushBlkEnv(env);
	      let ap_lv = LooseEvalExpr(body)
	      in
	        (PopBlkEnv();
	         lval := lval union Consistent(ap_lv,m))));
           LeaveCurFn());
    PopEnvL();
    return lval);
\end{vdm_al}
Here it is worth noting how function application is treated. For all
possible matches of the argument value against the formal parameter
pattern, the global state is updated (by $InstallCurFn$)
with information about the current function
application (to be used to create unique identifiers) and the
pattern identifiers from the formal parameter are installed as well,
such that bindings to these are not made a part of the resulting
model. The body is then evaluated in a context where these bindings
are visible and the consistent models are added to the resulting loose
evaluator. Here it can also be seen how the stack of environments are
used by pushing and popping environments at the outermost levels
(using $PushEmptyEnv$ and $PopEnvL$). This
is then taken into account by the corresponding lookup operation which
will only search for a binding in the top-most function application
environment.

\subsection{Literal Expressions}

\begin{vdm_al}
  LooseEvalLiteral: Literal ==> LVAL
  LooseEvalLiteral(lit) ==
    return if is_NumLit(lit)
           then {mk_(mk_NUM(lit.val),{|->})}
	   else {mk_(mk_BOOL(lit.val),{|->})}

  
\end{vdm_al}
Literal expressions naturally contains no looseness and do not rely on
any particular model. Therefore this is modeled as singleton sets with
emthy models.
  


--pat.vdmsl

\section{Loose Pattern Matching}

The operation $PatternMatch$ takes a syntactic pattern and a semantic value as
input, and returns the set of possible block environments. In each block
environment the identifiers defined in the input pattern are bound to
the corresponding value from the input semantic value. An empty return set
indicates that no matching can be performed.

\begin{vdm_al}
operations

  PatternMatch : Pattern * VAL ==> set of BlkEnv
  PatternMatch (pat_p, val_v) ==
    cases true:
     (is_PatternName(pat_p))     -> let mk_PatternName(id) = pat_p in
                                       return { MkBlkEnv(id, val_v) },
     (is_MatchVal(pat_p))        -> let lval = LooseEvalExpr(pat_p.val)
                                    in
				      (for all mk_(v,m) in set lval do
				        if v = val_v
					then return { MkEmptyBlkEnv()};
			               return {}),
     (is_SetEnumPattern(pat_p))  -> MatchSetEnumPattern(pat_p, val_v),
     (is_SetUnionPattern(pat_p)) -> MatchSetUnionPattern(pat_p, val_v)
    end;
\end{vdm_al}
Concerning match values it should be noted that the definition given
above is not entirely correct. In fact the model which are used for
the model should be returned as well, but we have abstracted away from
this for the moment because that would change the usage of the
$PatternMatch$ operation all places. Naturally, the model assumptions
used in the match value should be taken into account in the expression
evaluation function where the pattern occurs.

Note that the $MkBlkEnv$ operation takes into account whether we
are currently matching inside a function body, and if so adds the
relevant information to the unique identifier which is used in the
block environment.

\begin{vdm_al}

MatchSetEnumPattern : SetEnumPattern * VAL ==> set of BlkEnv
MatchSetEnumPattern ( mk_SetEnumPattern(elems_lp), val_v) ==
if is_SET(val_v)
then let mk_SET(val_sv) = val_v in
       if card val_sv = card elems elems_lp
       then let perm_slv = Permute(SetToSeq(val_sv)) in
              return dunion { MatchLists(elems_lp, tmp_lv) | 
                              tmp_lv in set perm_slv }
       else return {}
else return {};
\end{vdm_al}

This operation returns the set of all possible binding environments.
The main condition for matching a set enumeration pattern is that the
value is a set value and then that the cardinality of the value
corresponds to the number of elements in the set enumeration pattern. We
first create the set of all permutations of the input semantic value.
The distributed union of all matches of the input pattern list with
the elements from the permutation is returned when a successful
match is found.

\begin{vdm_al}
MatchSetUnionPattern : SetUnionPattern * VAL ==> set of BlkEnv
MatchSetUnionPattern ( mk_SetUnionPattern(lp_p, rp_p), val_v) ==
( dcl envres_sl : set of BlkEnv := {};
  if is_SET(val_v)
  then let mk_SET(val_sv) = val_v in
       ( for all mk_(setl_sv, setr_sv) in set 
               { mk_(setl_sv,setr_sv) |
                 setl_sv ,setr_sv in set power val_sv &
                   (setl_sv union setr_sv = val_sv ) and 
                   (setl_sv inter setr_sv = {}) } do 
           let envl_s = PatternMatch(lp_p, mk_SET(setl_sv)),
               envr_s = PatternMatch(rp_p, mk_SET(setr_sv)) in
             if envl_s <> {} and envr_s <> {}
             then let tmpenv = { CombineBlkEnv(tmp1, tmp2) |
                                 tmp1 in set envl_s, tmp2 in set envr_s } 
                  in
                    envres_sl := envres_sl union UnionMatch(tmpenv);
         return envres_sl
       )
  else return {}
);
\end{vdm_al}

In the case of a set union pattern, we first create all pairs of set
values, for which the union is equal to the original input set value, but
are still disjoint. For each pair, we create two sets of binding
environments. These are combined, and inserted into the resulting set of
binding environments after duplicate entries are removed\footnote{Here
it is worth noting that the disjointness criterion which has been
used for both set enumeration patterns and for set comprehension
patterns no longer conforms to the semantics given in the
standard. However, we have decided to retain this here because we have
not yet been able to find any examples where one would like such
patterns to be non-disjoint.}. $UnionMatch$ also ensures that pattern
identifiers which occur multiple times are consistently bound to the
same value everywhere.

\begin{vdm_al}
MatchLists : seq of Pattern * seq of VAL ==> set of BlkEnv
MatchLists (els_lp, val_lv) ==
 let tmp_ls = [ PatternMatch(els_lp(i), val_lv(i)) |
                i in set inds els_lp ] in
   if {} not in set elems tmp_ls
   then let perm_s = SeqOfSetOf2SetOfSeqOf(tmp_ls) in
          UnionMatch({ conc l | l in set perm_s })
   else return {};
\end{vdm_al}

For each element from the input pattern sequence, we create a set of
binding environments by matching the pattern with the corresponding element
from the input value sequence. If all elements match, each set of
environments from the sequence $tmp-ls$ is merged into a set with one
single environment.

\begin{vdm_al}
UnionMatch : set of BlkEnv ==> set of BlkEnv
UnionMatch (blk_sl) ==
return { StripDoubles(blk_l) |
         blk_l in set blk_sl &
           forall mk_(id1,v1_v) in set elems blk_l,
                  mk_(id2,v2_v) in set elems blk_l & 
                  SelName(id1) = SelName(id2) => (v1_v = v2_v)};
\end{vdm_al}

This operation removes duplicates from a single environment.

\begin{vdm_al}
StripDoubles : BlkEnv ==> BlkEnv
StripDoubles (blk_l) ==
( dcl tmpblk_l : BlkEnv := blk_l,
      res_l : BlkEnv := [];
  while tmpblk_l <> [] do 
    let mk_(id,val_v) = hd tmpblk_l in
    ( if not exists mk_(id1 ,-) in set elems tl tmpblk_l & id1 = id
      then res_l := CombineBlkEnv(res_l, MkBlkEnv(SelNameAndPos(id), val_v));
      tmpblk_l := tl tmpblk_l
    );
  return res_l
);
\end{vdm_al}

This operation removes duplicate bindings from an environment. Only the
first binding is kept.

\begin{vdm_al}
EvalBind : Bind ==> set of (BlkEnv * Model)
EvalBind (bind) ==
EvalSetBind(bind);
\end{vdm_al}

This operation is used to evaluate a binding.

\begin{vdm_al}
EvalSetBind : SetBind ==> set of (BlkEnv * Model)
EvalSetBind ( mk_SetBind(pat_p ,set_e )) ==
( dcl env_s : set of (BlkEnv * Model) := {};
  let set_lv = LooseEvalExpr(set_e) in
   (for all mk_(set_v,m) in set set_lv do
     (if is_SET(set_v)
      then let mk_SET(set_sv) = set_v in
           ( for all elm_v in set set_sv do 
               (let new_envs = PatternMatch(pat_p, elm_v) in
                env_s := env_s union {mk_(env,m) | env in set new_envs})
           )
      else error);
    return env_s)
)
\end{vdm_al}

This operation returns the set of binding environments for the pattern and
all the elements of the set expression.
