

--Accelerometer.vdmpp

\section{Accelerometer}

This class models the accelerometer physical device containing one only operation called stimulate which will hand in the stimulus to the rateController that process the information from this sensor.

\begin{vdm_al}
class Accelerometer is subclass of GLOBAL

operations

 public 
 stimulate : ActivityData ==> ()
 stimulate (a) == Pacemaker`rateController.stimulate(a);

end Accelerometer
\end{vdm_al}

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[Accelerometer]
\end{rtinfo}


--Environment.vdmpp

\section{Environment class}

The environment class is the class responsible for read a file containing inputs labelled by time and deliver them to the correct system sensor at the right time. It also collects the (re)actions from the system and provides functionality to enable the inspection of them.

The starting point is the definition of the types for input and output.

\begin{vdm_al}
class Environment is subclass of GLOBAL

types

public InputTP   = (Time * seq of Inpline)
inv inp == forall line in set elems inp.#2 & inp.#1 >= line.#4;

public Inpline = (Sense * Chamber * ActivityData * Time);

public Outline = (Pulse * Chamber * Time);  
\end{vdm_al}

Then the io abstraction is defined as an instance variable of the VDM IO library, and the input and output variables are defined.

\begin{vdm_al}
 instance variables

-- Input/Output 
io : IO := new IO();

inplines : seq of Inpline := [];
outlines : seq of Outline := [];
\end{vdm_al}

Also a boolean flag indicating that the environment is still sending stimuli to the environmet called busy is defined, and simtime represents the amount of time we want to simulate.

\begin{vdm_al}
instance variables
-- Environment  

busy : bool := true;

-- Amount of time we want to simulate
simtime : Time;
\end{vdm_al}

Then we define the sensors attachment place where the ``physician will screw'' the leads and where the accelerometer is set up.

\begin{vdm_al}
 instance variables
-- Sensors

-- Leads

leads : map Chamber to Lead := {|->};

-- Accelerometer
accelerometer : Accelerometer;

\end{vdm_al}

The environment constructor reads the test file which name is provided in the variable fname, extracting the amount of time we want to simulate and the inputs in that amount of time.

\begin{vdm_al}
 operations

-- Constructor
public 
Environment : seq of char ==> Environment
Environment (fname) ==
  def mk_(-,mk_(timeval,input)) = io.freadval[InputTP](fname) 
  in (inplines := input;
      simtime  := timeval
     );

\end{vdm_al}

The operations to connect the environment with the system.

\begin{vdm_al}
public 
addLeadSensor : Lead ==> ()
addLeadSensor(lsens) == 
   leads := leads ++ {lsens.getChamber() |-> lsens};

public 
addAccelerometer : Accelerometer ==> ()
addAccelerometer(acc) == 
   accelerometer := acc;

\end{vdm_al}

Run is the main operation, starting a session of system stimulation controlling the time and system execution invoking the Step operation on the system components.

\begin{vdm_al}

public 
Run: () ==> ()
Run () ==
   (
    while not (isFinished() 
               and 
               Pacemaker`heartController.isFinished()
               and 
               World`timerRef.GetTime() > simtime)
    do 
      (
       createSignal();
       Pacemaker`rateController.Step();
       Pacemaker`heartController.Step();        
       World`timerRef.StepTime();
      );
    );

\end{vdm_al}

The createSignal operation delivers stimuli to the different components
choosing between all the inputs the ones that should be delivered at the current time.

\begin{vdm_al}

private 
createSignal : () ==> ()
createSignal () == 
   ( 
    if len inplines > 0 
    then (dcl curtime : Time := World`timerRef.GetTime(),
              done : bool := false;
          while not done do
             let mk_(sensed,chamber,accinfo,stime) = hd inplines 
             in if stime <= curtime
                then
                (
                 leads(chamber).stimulate(sensed);
                 accelerometer.stimulate(accinfo);
                 inplines := tl inplines;
                 done := len inplines = 0
                )
                else done := true
           );
     if len inplines = 0 then busy := false;
    );

\end{vdm_al}

The (re)actions from the pacemaker are delivered to the environment through the handleEvent operation which updates the collection of outputs.

\begin{vdm_al}

public 
handleEvent : Pulse * Chamber * Time ==> ()
handleEvent(p,c,t) == outlines := outlines ^ [mk_(p,c,t)]; 

\end{vdm_al}

ShowResult is an operation used to inspect the output collection.

\begin{vdm_al}
public
showResult : () ==> ()
showResult () ==
   def - = io.writeval[seq of Outline](outlines) in skip;

\end{vdm_al}

The last operation called isFinished its used to have a mean of knowing if the environment finished the stimulation of the system phase.

\begin{vdm_al}
public 
isFinished: () ==> bool
isFinished () == return inplines = [] and not busy;

end Environment

\end{vdm_al}

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[Environment]
\end{rtinfo}


--GLOBAL.vdmpp

\section{Global class}

This is the common parent of the other classes where the shared knowledge between all the objects as types definitions is defined.

\begin{vdm_al}
class GLOBAL

types 

\end{vdm_al}

While poling the leads either a pulse is sensed or nothing, that's modelled by the union type LeadSense.

\begin{vdm_al}
-- Sensed activity
public
Sense = <NONE> | <PULSE>;
\end{vdm_al}

These senses are associated to the chamber where they were produced and again the uninon type is a good representation of it.

\begin{vdm_al}
-- Heart chamber identifier
public 
Chamber = <ATRIA> | <VENTRICLE>;
\end{vdm_al}

Diferently the output the accelerometer provides to the heart-controller
is defined below consitently to the requirement analisys definition that is a linear order and thus the choice of a subset of the natural numbers. 

\begin{vdm_al}

-- Accelerometer output
public 
ActivityData = nat1
inv a == a <= 7;

\end{vdm_al}

The heart controller can actuate in two different manners: either do nothing or discharge a pulse. The pulse was refined into two categories to distinguish if the system outputed an totally artificial pulse or a triggered response to sensing.

\begin{vdm_al}
-- Paced actvity
public
Pulse = <PULSE> | <TRI_PULSE>;
\end{vdm_al}

The operation modes are defined as a enumeration of the different
quotes corresponding to each mode.

\begin{vdm_al}
-- Operation mode
public 
Mode = <AOO> | <AOOR> | <AAT> | <DOO> | <OFF>;

\end{vdm_al}

Pulses per minute is an instance of nat1

\begin{vdm_al}
-- PPM
public 
PPM = nat1
inv ppm == ppm >= 30 and ppm <= 175;

\end{vdm_al}

And to promote readabillity Time is defined as nat type synonim. 

\begin{vdm_al}
-- Time
public 
Time = nat;
    
end GLOBAL
\end{vdm_al}





--HeartController.vdmpp

\section{HeartController class}

This is the core class monitoring and regulating the heart. 

\begin{vdm_al}
class HeartController is subclass of GLOBAL

instance variables 

 leads     : map Chamber to Lead;
 sensed    : map Chamber to Sense;
 mode      : Mode;
 FixedAV   : Time;
 lastPulse : Time;
 ARP       : Time;
 interval  : Time;
\end{vdm_al}

\begin{itemize}
\item leads: the leads attached to the pacemaker
\item sensed: keeps track of the last sense for each chamber
\item mode: current operation mode 
\item lastPulse: stores the time of the last atrial pace event
\item ARP : the ARP parameter
\item interval : is the interval between paces to achieve the expeced rate
\end{itemize}

The following operation is the constructor with the default values for the instance variables.

\begin{vdm_al}
operations
 
 public 
 HeartController : () ==> HeartController
 HeartController() == 
   (
    leads     := {|->};
    sensed    := {|->};
    mode      := <OFF>;
    FixedAV   := 150;
    lastPulse := 0;
    ARP       := 250;
    interval:= Pacemaker`rateController.getInterval();
   );

\end{vdm_al}

The addLeadPacer operation its used to attach a lead to the Pacemaker.

\begin{vdm_al}
 public 
 addLeadPacer : Lead ==> ()
 addLeadPacer (lead) == 
   leads := leads ++ {lead.getChamber() |-> lead};
\end{vdm_al}

The right pacing mode its choosed by pace that also refreshes the sensed map.

\begin{vdm_al}
 public 
 pace : ()  ==> ()
 pace () == 
   (cases mode :
         <AOO>  -> PaceAOO(),
         <AAT>  -> PaceAAT(),
         <DOO>  -> PaceDOO(),
         <OFF>  -> skip,
         others -> error
    end;
    sensed := {|->}
   );

\end{vdm_al}

And each time step we pace and after it we call step in the leads

\begin{vdm_al}
 public 
 Step : ()  ==> ()
 Step () == 
   (pace();
    for all key in set dom leads 
    do leads(key).Step();
   );
\end{vdm_al}

\newpage

Pace in the AOO mode follows from the VDM-SL specification discarding all the sensed activity and pacing each time interval.

\begin{vdm_al}
 private
 PaceAOO : () ==> ()
 PaceAOO () == 
   let curTime : Time = World`timerRef.GetTime()
   in if (interval + lastPulse <= curTime)
      then (
            lastPulse := curTime;
            leads(<ATRIA>).addLeadPace(<PULSE>,curTime)
           )
      else skip
  pre <ATRIA> in set dom leads
  ;
\end{vdm_al}

AAT mode follows from the VDM-SL specification..

\begin{vdm_al}
 private
 PaceAAT : () ==> ()
 PaceAAT () == 
   let curTime : Time = World`timerRef.GetTime()
   in if <ATRIA> in set dom sensed and sensed(<ATRIA>) = <PULSE>
      then if curTime - lastPulse <= ARP 
           then skip
           else (
                 lastPulse := curTime;
                 leads(<ATRIA>).addLeadPace(<TRI_PULSE>,curTime)
                 )
      elseif (interval + lastPulse <= curTime)
      then (
            lastPulse  := curTime;
            leads(<ATRIA>).addLeadPace(<PULSE>,curTime)
           )
      else skip
  pre <ATRIA> in set dom leads
  ;
\end{vdm_al}

Pace in the DOO mode follows from the VDM-SL specification discarding all the sensed activity and pacing each time interval.

\begin{vdm_al}
 private
 PaceDOO : () ==> ()
 PaceDOO () == 
   let curTime : Time = World`timerRef.GetTime()
   in (if (interval + lastPulse <= curTime)
       then (
            lastPulse := curTime;
            leads(<ATRIA>).addLeadPace(<PULSE>,curTime);
            leads(<VENTRICLE>).addLeadPace(<PULSE>,curTime + FixedAV)
           )
       else skip;
       )
  pre {<ATRIA>,<VENTRICLE>} subset dom leads
  ;
\end{vdm_al}

\newpage
Is finished depends on the leads isFinished.

\begin{vdm_al}
 public 
 isFinished : () ==> bool
 isFinished () == 
   return forall key in set dom leads &
                 leads(key).isFinished();
\end{vdm_al}

This is the lead handler that its called each time a pulse is sensed.

\begin{vdm_al}
 public 
 sensorNotify : Sense * Chamber ==> ()
 sensorNotify (s,c) == 
   (sensed := sensed ++ {c |-> s});
\end{vdm_al}

To switch the operating modes one should use

\begin{vdm_al}
 public 
 setMode : Mode ==> ()
 setMode (m) == 
   (mode := m);
\end{vdm_al}

And setInterval is the operation used by the RateController to adjust the interval.

\begin{vdm_al}
 public 
 setInterval : Time ==> ()
 setInterval (t) == interval := t;

end HeartController
\end{vdm_al}

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[HeartController]
\end{rtinfo}


--Lead.vdmpp

\section{Lead class}

The Lead models a Pacemaker lead that read and write pulse values from and to the heart. Each lead its attached to a specific chamber and this is captured using the instance variable chamber.


\begin{vdm_al}
class Lead is subclass of GLOBAL

instance variables

 private chamber : Chamber;       
 private scheduledPulse   : [(Time * Pulse)];
\end{vdm_al}

Also a scheduledPulse variable keeps track of a possible pulse that was scheduled by the HeartContorller.

\begin{vdm_al}
operations

 public 
 Lead: Chamber ==> Lead
 Lead(chm) == 
   (
    chamber := chm;
    scheduledPulse := nil;
   );
\end{vdm_al}

getChamber is an auxiliar operation that inspect the chamber where this lead is 
attached to.

\begin{vdm_al} 

 public 
 getChamber: () ==> Chamber
 getChamber () == return chamber;
\end{vdm_al}

Whenever theres an electrical pulse in the chamber corresponding to this lead the environment will call the following stimulate operation. And the lead will transmit it immediately to the HeartController.

\begin{vdm_al}

 public 
 stimulate : Sense ==> ()
 stimulate (s) == Pacemaker`heartController.sensorNotify(s,chamber);

\end{vdm_al}

The stepping mechanism in this class is just for each time unit check if there is a scheuled pulse that is made by followPlan.

\begin{vdm_al}
 public
 Step: () ==> ()
 Step () == followPlan();
\end{vdm_al}

A lead its in a finish state if there's no scheduledPulse.

\begin{vdm_al}
 public 
 isFinished : () ==> bool
 isFinished () == return scheduledPulse = nil;

\end{vdm_al}

The following operation its used by the HeartController when a pulse should be delivered. Its logic is simple if a pulse is to be delivered right now does it, otherwise schedules it. Because there will be always just one scheduled pulse a precondition is set accordingly.

\begin{vdm_al}
public
 addLeadPace : Pulse * Time ==> ()
 addLeadPace (p,t) == 
   if t <= World`timerRef.GetTime()
   then dischargePulse(p)
   else (scheduledPulse := mk_(t,p);
         return)
pre t > World`timerRef.GetTime() => scheduledPulse = nil;
\end{vdm_al}

Then the private function dischargePulse delivers the pulse to the environment.

\begin{vdm_al}
 private 
 dischargePulse : Pulse ==> ()
 dischargePulse (p) ==
    World`env.handleEvent(p,chamber,World`timerRef.GetTime());
\end{vdm_al}

The followPlan is invoked each Step in order to discharge the pulse that eventually was scheduled. 

\begin{vdm_al}
 private 
 followPlan : () ==> ()
 followPlan () ==
    (
     dcl curTime : Time := World`timerRef.GetTime();
     if scheduledPulse <> nil
     then if(curTime >= scheduledPulse.#1) 
          then (dischargePulse(scheduledPulse.#2);
                scheduledPulse := nil);
     
   );

end Lead 
\end{vdm_al}

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[Lead]
\end{rtinfo}


--IO.vdmpp


class IO

-- 	Overture STANDARD LIBRARY: INPUT/OUTPUT
--      --------------------------------------------
-- 
-- Standard library for the Overture Interpreter. When the interpreter
-- evaluates the preliminary functions/operations in this file,
-- corresponding internal functions is called instead of issuing a run
-- time error. Signatures should not be changed, as well as name of
-- module (VDM-SL) or class (VDM++). Pre/post conditions is 
-- fully user customisable. 
-- Dont care's may NOT be used in the parameter lists.
--
-- The in/out functions  will return false if an error occurs. In this
-- case an internal error string will be set (see 'ferror').

types
 
public
filedirective = <start>|<append> 

functions

-- Write VDM value in ASCII format to std out:
public
writeval[@p]: @p -> bool
writeval(val)==
  is not yet specified;

-- Write VDM value in ASCII format to file.
-- fdir = <start> will overwrite existing file,
-- fdir = <append> will append output to the file (created if
-- not existing).
public
fwriteval[@p]:seq1 of char * @p * filedirective -> bool
fwriteval(filename,val,fdir) ==
  is not yet specified;

-- Read VDM value in ASCII format from file
public
freadval[@p]:seq1 of char -> bool * [@p]
freadval(f) ==
  is not yet specified
  post let mk_(b,t) = RESULT in not b => t = nil;

operations

-- Write text to std out. Surrounding double quotes will be stripped,
-- backslashed characters should be interpreted.
public
echo: seq of char ==> bool
echo(text) ==
  fecho ("",text,nil);

-- Write text to file like 'echo'
public
fecho: seq of char * seq of char * [filedirective] ==> bool
fecho (filename,text,fdir) ==
  is not yet specified
  pre filename = "" <=> fdir = nil;

-- The in/out functions  will return false if an error occur. In this
-- case an internal error string will be set. 'ferror' returns this
-- string and set it to "".
public
ferror:()  ==> seq of char
ferror () ==
  is not yet specified;
  
-- New simplified format printing operations
-- The questionmark in the signature simply means any type
public static print: ? ==> ()
print(arg) ==
  is not yet specified;

-- New simplified format printing operations
-- The questionmark in the signature simply means any type
public static printf: seq of char * seq of ? ==> ()
printf(format, args) ==
  is not yet specified;

end IO


--Pacemaker.vdmpp

\section{Pacemaker class}

This class models the pacemaker system and will contain the components of it as 
static variables the first ones are the atrial and ventricular leads responsibles for discharge and sense electrical pulses.

\begin{vdm_al}
class Pacemaker 

 instance variables

 public static 
 atriaLead     : Lead      := new Lead(<ATRIA>);

 public static 
 ventricleLead : Lead      := new Lead(<VENTRICLE>);
\end{vdm_al}

The Accelerometer component and the RateContoller.

\begin{vdm_al}

 instance variables

 public static 
 accelerometer       : Accelerometer   := new Accelerometer();

 public static 
 rateController      : RateController  := new RateController();
\end{vdm_al}

The final declaration is the HeartController component.

\begin{vdm_al}
 instance variables
 
 public static 
 heartController     : HeartController := new HeartController();

end Pacemaker
\end{vdm_al}



--RateController.vdmpp

\section{RateController class}

The RateController is the class that models the rate adaptation control. For doing that it has the sensed instance variable where the last accelerometer value is stored and the interval corresponds to the actual rate interval. 

\begin{vdm_al}
class RateController is subclass of GLOBAL

instance variables
 sensed   : [ActivityData];
 interval : Time;
 finished : bool; 
\end{vdm_al}

The other variables are used to control the value of the interval with an invariant restricting the values to the ranges defined in\cite{PaceSysSpec}.

\begin{vdm_al}
instance variables
 LRL       : PPM;
 MSR       : PPM;
 threshold : nat1;
 reactionT : Time;
 recoveryT : Time;
 responseF : nat1;
inv threshold < 8
    and
    reactionT in set {10,...,50}
    and
    recoveryT in set {2,...,16}
    and 
    responseF <= 16;
\end{vdm_al} 

The Constructor initializes the instance variables with the default values as consulted in\cite{PaceSysSpec};

\begin{vdm_al}
operations
  
 public 
 RateController: () ==> RateController
 RateController() ==
   (LRL       := 60;
    MSR       := 120;
    threshold := MED;
    reactionT := 10; -- 10 s
    recoveryT := 2; -- 2 minutes;
    responseF := 8;
    sensed    := nil; 
    interval  := 1/((LRL/60)/1000);
    finished  := false;

   );
\end{vdm_al} 

This is the method that should be used to inspect wich is the actual value of the maximum interval between atrial events in order to achieve a bpm rate above or equal the LRL defined.

\begin{vdm_al}
public
getInterval : () ==> Time
getInterval () == return interval;
\end{vdm_al}

Each time step the controlRate operation will be invoked if there was some input from the accelerometer.

\begin{vdm_al}

 public 
 Step : () ==> ()
 Step () == if sensed <> nil then controlRate();

\end{vdm_al} 

The control of the rate is done regarding a threshold.

\begin{vdm_al}
 private
 controlRate : () ==> ()
 controlRate () == 
    (
    if sensed > threshold
    then increaseRate()
    elseif sensed < threshold
    then decreaseRate()
    else skip;
    sensed := nil;
    );
\end{vdm_al}

Stimulate is the handler wich the acclerometer will call to deliver input.

\begin{vdm_al}
 public 
 stimulate : ActivityData ==> ()
 stimulate (ad) == sensed := ad;
\end{vdm_al} 

These are the operations modelling the change in rate, at this modelling stage the increase as mentioned above is done imediatelly.

\begin{vdm_al}
 private
 increaseRate : () ==> ()
 increaseRate () == 
   (
    interval := 1 / ((MSR / 60) / 1000);
    Pacemaker`heartController.setInterval(interval)
   );

\end{vdm_al}

Decresing the rate its also instantaneously.

\begin{vdm_al}
 private
 decreaseRate : () ==> ()
 decreaseRate () == 
   (
    interval := 1 / ((LRL / 60) / 1000);
    Pacemaker`heartController.setInterval(interval)
   );
\end{vdm_al}

To improve readability the accelerometer outputs (ActivityData)
are defined as values.

\begin{vdm_al}
values

V_LOW : ActivityData = 1;
LOW : ActivityData = 2;
MED_LOW : ActivityData = 3;
MED : ActivityData = 4;
MED_HIGH : ActivityData = 5;
HIGH : ActivityData = 6;
V_HIGH : ActivityData = 7;

end RateController
\end{vdm_al} 

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[RateController]
\end{rtinfo}


--Timer.vdmpp

\section{Timer class}

In the sequential model time abstraction is provided via the Timer class.

\begin{vdm_al}
class Timer is subclass of GLOBAL

 instance variables
\end{vdm_al}

The instance variable currentTime keeps track of time.

\begin{vdm_al} 
currentTime : Time := 0;

\end{vdm_al}

Time is steping 50 units each time\ldots 

\begin{vdm_al}
 values

stepLength : Time = 50;

\end{vdm_al}

\ldots the operation StepTime is called.

\begin{vdm_al}
 operations

public 
StepTime : () ==> ()
StepTime () == currentTime := currentTime + stepLength;

\end{vdm_al}

And time can be consulted through GetTime.

\begin{vdm_al}
public 
GetTime : () ==> Time
GetTime () == return currentTime;


end Timer
\end{vdm_al}

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[Timer]
\end{rtinfo}


--World.vdmpp

\section{World class}

The World class as its name tell is the class modelling the world where the system and environment will co-exist.

\begin{vdm_al}
class World is subclass of GLOBAL

types

instance variables

public static env      : [Environment] := nil;
public static timerRef : Timer := new Timer();
\end{vdm_al}

The World constructor its the responsible for connect system and environment, and its invoked with a scenario and a mode to test.

\begin{vdm_al}
operations

public World: seq of char * Mode ==> World
World(filename,mode) == 
  (  -- create an environment
     env := new Environment(filename);

     -- bind leads to the environment
     env.addLeadSensor(Pacemaker`atriaLead);
     env.addLeadSensor(Pacemaker`ventricleLead);
   
     -- bind accelerometer to the environment
     env.addAccelerometer(Pacemaker`accelerometer);
    
     -- bind leads to the controler
     Pacemaker`heartController.addLeadPacer(Pacemaker`atriaLead);
     Pacemaker`heartController.addLeadPacer(Pacemaker`ventricleLead);
    
     -- set up mode
     Pacemaker`heartController.setMode(mode);
  );
\end{vdm_al}

And Run is the operation that starts a test sequence.

\begin{vdm_al}
public Run: () ==> ()
Run () == (env.Run(); env.showResult());
  

end World
\end{vdm_al}

\subsection*{Test coverage}

\begin{rtinfo}
{tc.info}[World]
\end{rtinfo}
