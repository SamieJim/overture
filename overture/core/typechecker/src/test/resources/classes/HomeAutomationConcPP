

--Actuator.vdmpp

class Actuator

instance variables

protected ID   : nat;
protected Type : NetworkTypes`nodeType;
protected Corr : NetworkTypes`correction;
protected Env	: Surroundings;

operations

public GetID: () ==> nat
GetID() ==
  return ID;

public GetType: () ==> NetworkTypes`nodeType
GetType() ==
  return Type;

protected GetCorr: () ==> NetworkTypes`correction
GetCorr() ==
  return Corr;

public Step: () ==> ()
Step() ==
  is subclass responsibility

end Actuator


--ClockTick.vdmpp

class ClockTick

instance variables

threadID : int := -1;

operations

public ClockTick: nat ==> ClockTick
ClockTick(t) ==
threadID := t;

thread
  while true 
  do
   (World`timerRef.WaitRelative(1);
--    World`timerRef.NotifyAll();
--    World`timerRef.Awake();
   )

end ClockTick


--Environment.vdmpp

class Environment

instance variables

private ha       : HA;
private io       : IO := new IO();
private inlines	 : seq of inline := [];
private simtime	 : nat;

private finished : bool := false;

types

-- Input file: Temp, Humid, Time
public inline	= nat * nat * nat;

operations

public Environment: seq of char ==> Environment
Environment(fname) ==
 (def mk_ (-,mk_(t,input)) = io.freadval[nat * seq of inline](fname) 
  in
   (inlines := input;
    simtime := t;
   );
  ha := new HA();
 );

private CreateSignal: () ==> ()
CreateSignal() ==
 (if len inlines > 0
  then (dcl curtime : nat := World`timerRef.GetTime();
  def mk_ (temp, humid, time) = hd inlines 
  in
   (if time = curtime
    then (HA`Env.SetTemp(temp);
          HA`Env.SetHumid(humid);
          IO`print([time] ^ ["New env values set!"]);
          IO`print(" \n");
          inlines := tl inlines;
          return
         );
   );
  )
  else (finished := true;
        return
       );
 );	

public IsFinished: () ==> ()
IsFinished() ==
  skip;

sync

  per IsFinished => finished;

thread
 (--start(new ClockTick(threadid));
  while World`timerRef.GetTime() < simtime 
  do
   (if not finished
    then CreateSignal();
		
    World`timerRef.WaitRelative(1);
   );
  finished := true;
 )

end Environment


--HomeAutomation.vdmpp


class HA

instance variables

public static Env		: Surroundings := new Surroundings();
public static Host		: HostController := new HostController(22, 75);
public static TempNode	: TemperatureSensor := new TemperatureSensor(1, <TEMPSENSOR>, 0, Env);
public static HumidNode	: HumidSensor := new HumidSensor(2, <HUMIDSENSOR>, 0, Env);
public static ThermNode	: Thermostat := new Thermostat(3, <THERMOSTAT>, Env);
public static WinNode	: Window := new Window(4, <WINDOW>, Env);

end HA


--HostController.vdmpp


class HostController

instance variables

private finished    : bool := false;
private print       : bool := true;

private TargetTemp  : nat;
private Temp        : nat := 0;
private TargetHumid : nat;
private Humid       : nat := 0;

private NodeList    : map nat to NetworkTypes`nodeType := { |-> };
private Algo        : algType := <NONE>;


types   

private algType	= <THTW> | <TTW> | <TT> | <TW> | <HW> | <NONE>;


operations

public HostController: nat * nat ==> HostController
HostController(t, h) ==
 (TargetTemp := t;
  TargetHumid := h;
 );

private UpdateValues: () ==> ()
UpdateValues() ==
 (for all r in set rng NodeList 
  do
   (if (r = <HUMIDSENSOR>)
    then Humid := HA`HumidNode.ReadValue();
    if (r = <TEMPSENSOR>)
    then Temp := HA`TempNode.ReadValue();
   );
 );

private Algorithm: () ==> ()
Algorithm() ==
 (cases Algo:
    <THTW> -> THTWAlgo(),
    <TTW>  -> TTWAlgo(),
    <TT>   -> TTAlgo(),
    <TW>   -> TWAlgo(),
    <HW>   -> HWAlgo(),
    <NONE> -> return
  end
 );

private THTWAlgo: () ==> ()
THTWAlgo() ==
 (if (Humid > TargetHumid)
  then (HA`WinNode.SetCorrection(<OPEN>);
        HA`ThermNode.SetCorrection(<NONE>);
        print := true;
       )
  elseif (Temp > TargetTemp+1)
  then (HA`WinNode.SetCorrection(<CLOSE>);
        HA`ThermNode.SetCorrection(<DEC>);
        print := true;
       )
  elseif (Temp < TargetTemp-1)
  then (HA`WinNode.SetCorrection(<CLOSE>);
        HA`ThermNode.SetCorrection(<INC>);
        print := true;
       )
  else (HA`WinNode.SetCorrection(<CLOSE>);
        HA`ThermNode.SetCorrection(<NONE>);
        if print
        then (IO`print([World`timerRef.GetTime()] ^ ["Target values reached"]);
              IO`print(" \n");
             );
        print := false;
       );
 );

private TTWAlgo: () ==> ()
TTWAlgo() ==
 (if (Temp > TargetTemp + 2)
  then (HA`WinNode.SetCorrection(<OPEN>);
        HA`ThermNode.SetCorrection(<DEC>);
        print := true;
       )
  elseif (Temp > TargetTemp + 1)
  then (HA`WinNode.SetCorrection(<CLOSE>);
        HA`ThermNode.SetCorrection(<DEC>);
        print := true;
       )
  elseif (Temp < TargetTemp - 1)
  then (HA`WinNode.SetCorrection(<CLOSE>);
        HA`ThermNode.SetCorrection(<INC>);
        print := true;
       )
  else (HA`WinNode.SetCorrection(<CLOSE>);
        HA`ThermNode.SetCorrection(<NONE>);
        if print
        then (IO`print([World`timerRef.GetTime()] ^ ["Target values reached"]);
              IO`print(" \n");
             );
        print := false;
       );
 );

private TTAlgo: () ==> ()
TTAlgo() ==
 (if (Temp > TargetTemp + 1)
  then (HA`ThermNode.SetCorrection(<DEC>);
        print := true;
       )
  elseif (Temp < TargetTemp - 1)
  then (HA`ThermNode.SetCorrection(<DEC>);
        print := true;
       )
  else (HA`ThermNode.SetCorrection(<NONE>);
        if print
        then (IO`print([World`timerRef.GetTime()] ^ ["Target values reached"]);
              IO`print(" \n");
             );
        print := false;
       );
 );

private TWAlgo: () ==> ()
TWAlgo() ==
 (if (Temp > TargetTemp + 1)
  then (HA`WinNode.SetCorrection(<OPEN>);
        print := true;
       ) 
  else (HA`WinNode.SetCorrection(<CLOSE>);
        if print
        then (IO`print([World`timerRef.GetTime()] ^ ["Target values reached"]);
              IO`print(" \n");
             );
        print := false;
       );
 );

private HWAlgo: () ==> ()
HWAlgo() ==
 (if (Humid > TargetHumid)
  then (HA`WinNode.SetCorrection(<OPEN>);
        print := true;
       )
  else (HA`WinNode.SetCorrection(<CLOSE>);
        if print
        then (IO`print([World`timerRef.GetTime()] ^ ["Target values reached"]);
              IO`print(" \n");
             );
        print := false;
       );
 );

private UpdateAlgorithm: () ==> ()
UpdateAlgorithm() ==
 (if (rng NodeList = {})
  then Algo := <NONE>
  elseif (rng NodeList = {<TEMPSENSOR>, <HUMIDSENSOR>, <THERMOSTAT>, <WINDOW>})
  then Algo := <THTW>
  elseif (rng NodeList = {<TEMPSENSOR>, <THERMOSTAT>,<WINDOW>})
  then Algo := <TTW>
  elseif (rng NodeList = {<TEMPSENSOR>, <THERMOSTAT>})
  then Algo := <TT>
  elseif (rng NodeList = {<TEMPSENSOR>, <WINDOW>})
  then Algo := <TW>
  elseif (rng NodeList = {<HUMIDSENSOR>, <WINDOW>})
  then Algo := <HW>
  else Algo := <NONE>;
 );

private printStr: seq of char ==> ()
printStr(str) ==
 (print := false;
  IO`print(str);
 );

public AddNode: nat * NetworkTypes`nodeType ==> ()
AddNode(id, type) ==
 (NodeList := NodeList ++ {id |-> type};
  UpdateAlgorithm();
 )
pre id not in set dom NodeList
post card(dom NodeList) = card(dom NodeList~) + 1;

public RemoveNode: nat * NetworkTypes`nodeType ==> ()
RemoveNode(id, type) ==
 (if (NodeList(id) = type)
  then NodeList := {id} <-: NodeList;
 )
pre id in set dom NodeList
post card(dom NodeList) = card(dom NodeList~) - 1;

public IsFinished: () ==> ()
IsFinished() == 
  skip;

public Finish: () ==> ()
Finish() == 
  finished := true;

sync

per IsFinished => finished;
per printStr => print;


thread
 (while true 
  do
   (UpdateValues();
    Algorithm();
    World`timerRef.WaitRelative(World`timerRef.stepLength);
   )
 )

end HostController


--HumidSensor.vdmpp

class HumidSensor is subclass of Sensor

instance variables

finished	: bool := false;

operations

public HumidSensor: nat * NetworkTypes`nodeType * nat * Surroundings ==> HumidSensor
HumidSensor (id, type, val, envir) ==
 (ID := id;
  Type := type;
  Value := val;
  Env := envir;
 );

public Finish: () ==> ()
Finish() ==
  finished := true;

public IsFinished: () ==> ()
IsFinished() ==
  skip;

public Step: () ==> ()
Step() ==
  skip;
  
sync
	
  per IsFinished => finished;

thread
 (while true 
  do 
   (Value := Env.ReadHumid();
    World`timerRef.WaitRelative(World`timerRef.stepLength);
   )
 )

end HumidSensor


--IO.vdmpp

class IO

-- 	Overture STANDARD LIBRARY: INPUT/OUTPUT
--      --------------------------------------------
-- 
-- Standard library for the Overture Interpreter. When the interpreter
-- evaluates the preliminary functions/operations in this file,
-- corresponding internal functions is called instead of issuing a run
-- time error. Signatures should not be changed, as well as name of
-- module (VDM-SL) or class (VDM++). Pre/post conditions is 
-- fully user customisable. 
-- Dont care's may NOT be used in the parameter lists.
--
-- The in/out functions  will return false if an error occurs. In this
-- case an internal error string will be set (see 'ferror').

types
 
public
filedirective = <start>|<append> 

functions

-- Write VDM value in ASCII format to std out:
public
writeval[@p]: @p -> bool
writeval(val)==
  is not yet specified;

-- Write VDM value in ASCII format to file.
-- fdir = <start> will overwrite existing file,
-- fdir = <append> will append output to the file (created if
-- not existing).
public
fwriteval[@p]:seq1 of char * @p * filedirective -> bool
fwriteval(filename,val,fdir) ==
  is not yet specified;

-- Read VDM value in ASCII format from file
public
freadval[@p]:seq1 of char -> bool * [@p]
freadval(f) ==
  is not yet specified
  post let mk_(b,t) = RESULT in not b => t = nil;

operations

-- Write text to std out. Surrounding double quotes will be stripped,
-- backslashed characters should be interpreted.
public
echo: seq of char ==> bool
echo(text) ==
  fecho ("",text,nil);

-- Write text to file like 'echo'
public
fecho: seq of char * seq of char * [filedirective] ==> bool
fecho (filename,text,fdir) ==
  is not yet specified
  pre filename = "" <=> fdir = nil;

-- The in/out functions  will return false if an error occur. In this
-- case an internal error string will be set. 'ferror' returns this
-- string and set it to "".
public
ferror:()  ==> seq of char
ferror () ==
  is not yet specified;
  
-- New simplified format printing operations

public static print: ? ==> ()
print(arg) ==
	is not yet specified;

public static printf: seq of char * seq of ? ==> ()
printf(format, args) ==
	is not yet specified;

end IO


--NetworkTypes.vdmpp

class NetworkTypes

types   

public nodeType   = <TEMPSENSOR> | <HUMIDSENSOR> | <WINDOW> | <THERMOSTAT> | <HOSTCONTROL> | <NONE>;
public correction = <INC> | <DEC> | <OPEN> | <CLOSE> | <NONE>;

end NetworkTypes


--Sensor.vdmpp

class Sensor

instance variables

protected ID	: nat;
protected Type	: NetworkTypes`nodeType;
protected Value	: nat;
protected Env	: Surroundings;

operations

public GetID: () ==> nat
GetID() ==
  return ID;

public GetType: () ==> NetworkTypes`nodeType
GetType() ==
  return Type;

public ReadValue: () ==> nat
ReadValue() ==
  return Value;

public Step: () ==> ()
Step() ==
  is subclass responsibility

end Sensor


--Surroundings.vdmpp

class Surroundings

instance variables

private envTemp	 : nat;
private envHumid : nat;

operations

public Surroundings: () ==> Surroundings
Surroundings() ==
 (envTemp := 20;
  envHumid := 75;
 );

public SetTemp: nat ==> ()
SetTemp(t) ==
  envTemp := t;

public SetHumid: nat ==> ()
SetHumid(h) ==
  envHumid := h;

public ReadTemp: () ==> nat
ReadTemp() ==
  return envTemp;

public IncTemp: () ==> ()
IncTemp() ==
  envTemp := envTemp + 1;

public DecTemp: () ==> ()
DecTemp() ==
  envTemp := envTemp - 1;

public ReadHumid: () ==> nat
ReadHumid() ==
  return envHumid;

public IncHumid: () ==> ()
IncHumid() ==
  envHumid := envHumid + 1;

public DecHumid: () ==> ()
DecHumid() ==
  envHumid := envHumid - 1;

sync

  mutex(IncTemp);
  mutex(DecTemp);
  mutex(SetTemp);
  mutex(ReadTemp, IncTemp, DecTemp, SetTemp);
  mutex(IncHumid);
  mutex(DecHumid); 
  mutex(SetHumid);
  mutex(ReadHumid, IncHumid, DecHumid, SetHumid);

end Surroundings


--TemperatureSensor.vdmpp

class TemperatureSensor is subclass of Sensor

instance variables

finished	: bool := false;

operations

public TemperatureSensor: nat * NetworkTypes`nodeType * nat * 
Surroundings ==> TemperatureSensor
TemperatureSensor (id, type, val, envir) ==
 (ID := id;
  Type := type;
  Value := val;
  Env := envir;
 );

public Finish: () ==> ()
Finish() ==
  finished := true;

public IsFinished: () ==> ()
IsFinished() ==
  skip;

public Step: () ==> ()
Step() ==
  skip;

sync
	
  per IsFinished => finished;

thread
 (while true 
  do
   (Value := Env.ReadTemp();
    World`timerRef.WaitRelative(World`timerRef.stepLength);
   )
 )

end TemperatureSensor


--Thermostat.vdmpp


class Thermostat is subclass of Actuator

instance variables

finished	: bool := false;


operations

public Thermostat: nat * NetworkTypes`nodeType * Surroundings ==> Thermostat
Thermostat (id, type, envir) ==
 (ID := id;
  Type := type;
  Corr := <NONE>;
  Env := envir;
 );

public SetCorrection: NetworkTypes`correction ==> ()
SetCorrection(cor) ==
  Corr := cor
pre (cor = <INC>) or (cor = <DEC>) or (cor = <NONE>);

public Finish: () ==> ()
Finish() ==
  finished := true;

public IsFinished: () ==> ()
IsFinished() ==
  skip;

public Step: () ==> ()
Step() ==
  skip;
  
sync
	
  per IsFinished => finished;

thread
 (while true 
  do 
   (dcl tempCorr: NetworkTypes`correction := GetCorr();

    if tempCorr = <INC>
    then HA`Env.IncTemp()
    elseif tempCorr = <DEC>
    then HA`Env.DecTemp();
	
    World`timerRef.WaitRelative(World`timerRef.stepLength);
   )
 )

end Thermostat


--TimeStamp.vdmpp

\begin{vdm_al}
class TimeStamp

\end{vdm_al}
Modified by Johanne U. Jensen to act as a thread barrier.

Class used for concurrent VDM++ models. All threads should call the following operations:
- WaitRelative(t): makes the thread periodic with t = the period
- NotifyAll(): notified all threads sleeping in the wakeUpMap
- Awake(): puts the thread to sleep - will wakeup when t time units has passed  

TimeStamp(nat1 barrierCount);

WaitRelative // blocks
WaitAbsolute // blocks

NotifyThread // Non blocking
GetTime // Non blocking

ThreadDone // Non Blocking

\begin{vdm_al}

values

public stepLength : nat = 1;

instance variables

currentTime  : nat   := 0;
wakeUpMap    : map nat to [nat] := {|->};
barrierCount : nat1;

operations

public TimeStamp : nat1 ==> TimeStamp
TimeStamp(count) ==
	barrierCount := count;

public WaitRelative : nat ==> ()
WaitRelative(val) ==
  WaitAbsolute(currentTime + val);
 
public WaitAbsolute : nat ==> ()
WaitAbsolute(val) == (
  AddToWakeUpMap(threadid, val);
  -- Last to enter the barrier notifies the rest.
  BarrierReached();
  -- Wait till time is up
  Awake();
);

BarrierReached : () ==> ()
BarrierReached() == 
(
	while  (card dom wakeUpMap = barrierCount) do
  	(
  		currentTime := currentTime + stepLength;
  		let threadSet : set of nat = {th | th in set dom wakeUpMap 
  										 & wakeUpMap(th) <> nil and wakeUpMap(th) <= currentTime }
		in
			for all t in set threadSet 
			do
				wakeUpMap := {t} <-: wakeUpMap;
	);
)
post forall x in set rng wakeUpMap & x = nil or x >= currentTime;

AddToWakeUpMap : nat * [nat] ==> ()
AddToWakeUpMap(tId, val) ==
   wakeUpMap := wakeUpMap ++ { tId |-> val };

public NotifyThread : nat ==> ()
NotifyThread(tId) ==
 wakeUpMap := {tId} <-: wakeUpMap;

public GetTime : () ==> nat
GetTime() ==
  return currentTime;

Awake: () ==> ()
Awake() == skip;

public ThreadDone : () ==> ()
ThreadDone() == 
	AddToWakeUpMap(threadid, nil);

sync
  per Awake => threadid not in set dom wakeUpMap;

  -- Is this really needed?
  mutex(AddToWakeUpMap);
  mutex(NotifyThread);
  mutex(BarrierReached);
  
  mutex(AddToWakeUpMap, NotifyThread);
  mutex(AddToWakeUpMap, BarrierReached);
  mutex(NotifyThread, BarrierReached);
  
  mutex(AddToWakeUpMap, NotifyThread, BarrierReached);

end TimeStamp


--Window.vdmpp

class Window is subclass of Actuator

instance variables

finished	: bool := false;

operations

public Window: nat * NetworkTypes`nodeType * Surroundings ==> Window
Window (id, type, envir) ==
 (ID := id;
  Type := type;
  Corr := <CLOSE>;
  Env := envir;
 );

public SetCorrection: NetworkTypes`correction ==> ()
SetCorrection(cor) ==
  Corr := cor
pre (cor = <OPEN>) or (cor = <CLOSE>);

public Finish: () ==> ()
Finish() ==
  finished := true;

public IsFinished: () ==> ()
IsFinished() ==
  skip;

public Step: () ==> ()
Step() ==
  skip;
  
sync
	
  per IsFinished => finished;

thread
 (while true 
  do
   (if (GetCorr() = <OPEN>)
    then (HA`Env.DecHumid();
          HA`Env.DecTemp();
         );
    World`timerRef.WaitRelative(World`timerRef.stepLength);
   )
 )

end Window


--World.vdmpp

class World

instance variables

private env				: Environment;
public static timerRef	: TimeStamp := new TimeStamp(6);

operations

public World: () ==> World
World() ==
 (env := new Environment("scenario.txt");
  HA`Host.AddNode(HA`TempNode.GetID(),HA`TempNode.GetType());
  HA`Host.AddNode(HA`HumidNode.GetID(),HA`HumidNode.GetType());
  HA`Host.AddNode(HA`ThermNode.GetID(),HA`ThermNode.GetType());
  HA`Host.AddNode(HA`WinNode.GetID(),HA`WinNode.GetType());

  start(HA`TempNode);
  start(HA`HumidNode);
  start(HA`ThermNode);
  start(HA`WinNode);
  start(HA`Host);
 );

public Run: () ==> ()
Run() ==
 (-- start environment creating input
  start(env);
  -- wait til environment has finished creating input
  env.IsFinished();
  -- kill HostController thread
  --HA`Host.Finish();
  IO`print("Test run finished");
 );

end World
