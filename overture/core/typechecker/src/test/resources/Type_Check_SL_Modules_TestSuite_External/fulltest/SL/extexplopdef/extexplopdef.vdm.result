<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="org.overture.typechecker.tests.external.ExternalModulesSlTypeCheckTest">
<message column="26" line="18" message="Definition 's' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="35" line="24" message="Definition 't' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="26" line="24" message="Definition 's' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="17" line="38" message="Definition 'r' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="7" line="59" message="Duplicate definition: a" messageType="warning" number="5007" resource="extexplopdef.vdm"/>
<message column="7" line="59" message="a at 5:7 hidden by a" messageType="warning" number="5008" resource="extexplopdef.vdm"/>
<message column="7" line="5" message="Duplicate definition: a" messageType="warning" number="5007" resource="extexplopdef.vdm"/>
<message column="3" line="13" message="Definition 'Op1' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="18" message="Definition 'Op2' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="24" message="Definition 'Op3' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="31" message="Definition 'Op4' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="38" message="Definition 'Op5' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="44" message="Definition 'Op6' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="52" message="Definition 'Op7' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="59" message="Definition 'Op8' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="65" message="Definition 'Op9' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="70" message="Definition 'Op10' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="75" message="Definition 'Op11' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="80" message="Definition 'Op12' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="3" line="85" message="Definition 'Op13' not used" messageType="warning" number="5000" resource="extexplopdef.vdm"/>
<message column="8" line="42" message="State variable 'OpDefTest`a~' cannot be accessed from this context" messageType="error" number="3302" resource="extexplopdef.vdm"/>
<message column="13" line="42" message="Name 'OpDefTest`s' is not in scope" messageType="error" number="3182" resource="extexplopdef.vdm"/>
<message column="3" line="44" message="Operation returns unexpected type" messageType="error" number="3035" resource="extexplopdef.vdm"/>
<message column="18" line="56" message="State variable 'OpDefTest`b~' cannot be accessed from this context" messageType="error" number="3302" resource="extexplopdef.vdm"/>
<message column="9" line="62" message="Left and right of '&lt;&gt;' different types" messageType="error" number="3136" resource="extexplopdef.vdm"/>
<message column="15" line="63" message="Left hand of + is not numeric" messageType="error" number="3139" resource="extexplopdef.vdm"/>
<message column="3" line="70" message="Postcondition returns unexpected type" messageType="error" number="3018" resource="extexplopdef.vdm"/>
<message column="3" line="75" message="State variable a is not this type" messageType="error" number="3032" resource="extexplopdef.vdm"/>
<message column="14" line="83" message="Errs clause is not bool -&gt; bool" messageType="error" number="3307" resource="extexplopdef.vdm"/>
<result/>
</testResult>
