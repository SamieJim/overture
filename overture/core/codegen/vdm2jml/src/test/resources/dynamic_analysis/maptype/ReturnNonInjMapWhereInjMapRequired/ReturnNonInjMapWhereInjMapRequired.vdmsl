module Entry

exports all
imports from IO all
definitions

types

V2 ::
 x : int
 y : int;

operations

Run : () ==> ?
Run () ==
(
 IO`println("Before legal use");
 let - : inmap nat to V2 = consInjMap() in skip;
 IO`println("After legal use");
 IO`println("Before illegal use");
 let - : inmap nat to V2 = consInjMapErr() in skip;
 IO`println("After illegal use");
 return 0;
);

functions

consInjMap :  () -> inmap nat to V2
consInjMap () == 
  {1 |-> mk_V2(1,2), 2 |-> mk_V2(2,1)};
  
consInjMapErr :  () -> inmap nat to V2
consInjMapErr () == 
  {1 |-> mk_V2(1,2), 2 |-> mk_V2(2,1), 3 |-> mk_V2(1,2)};

end Entry	