module M

exports all
definitions

state St of
x : int
s : seq of nat
m : map nat to nat
init s == s = mk_St(1,[1], {1 |-> 1})
inv s == s.x < 5
end

operations

assignSt : () ==> ()
assignSt () ==
  St := mk_St(1,[1], {1 |-> 1});

atomicAssignSt : () ==> nat
atomicAssignSt () ==
(
  atomic
  (
    St := mk_St(1,[1], {1 |-> 1});
    St := mk_St(1,[1], {1 |-> 1});
  );
  return 0;
);

assignX : () ==> ()
assignX () ==
  x := x + 1;
  
atomicAssignX : () ==> nat
atomicAssignX () ==
(
  atomic
  (
    x := x + 1;
    x := x + 1;
  );
  return 0;
);

assignS : () ==> nat
assignS () ==
(
  s(1) := 1;
  return 0;
);

atomicAssignS : () ==> ()
atomicAssignS () ==
atomic
(
  s(1) := 1;
  s(1) := 1;
);

assignM : () ==> nat
assignM () ==
(
  m(1) := 1;
  return 0;
);
  
atomicAssignM : () ==> ()
atomicAssignM () ==
atomic
(
  m(1) := 1;
  m(1) := 1;
);

end M