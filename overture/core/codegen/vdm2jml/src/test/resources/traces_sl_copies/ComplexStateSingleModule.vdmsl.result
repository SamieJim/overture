package project;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class Entry implements java.io.Serializable {
  /*@ spec_public @*/

  private static project.Entrytypes.St St = new project.Entrytypes.St(new project.Entrytypes.R(0L));
  /*@ public ghost static boolean invChecksOn = true; @*/

  private Entry() {}

  public static Number op() {

    project.Entrytypes.R stateDes_1 = St.get_r();
    //@ assert stateDes_1 != null;

    stateDes_1.set_x(St.get_r().get_x().longValue() + 1L);
    //@ assert Utils.is_(St,project.Entrytypes.St.class);

    //@ assert St.valid();

    Number ret_1 = St.get_r().get_x();
    //@ assert Utils.is_nat(ret_1);

    return ret_1;
  }

  public static void Entry_T1_Run(final TestAccumulator testAccumulator) {

    final Store store = new Store();
    final IdGenerator gen = new IdGenerator();
    {
      final Number ID_1 = gen.inc();
      store.staticReg(ID_1, Entry.class);
    }

    SequenceTraceNode sequence_1 = new SequenceTraceNode();
    CallStatement callStm_1 =
        new CallStatement() {
          public Object execute() {

            return op();
          }

          public String toString() {

            return "op()";
          }
        };
    StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

    RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_1, 1L, 3L);

    sequence_1.add(repeat_1);

    TraceNode.executeTests(sequence_1, testAccumulator, store);
  }

  public String toString() {

    return "Entry{" + "St := " + Utils.toString(St) + "}";
  }
}

##########
package project.Entrytypes;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class R implements Record, java.io.Serializable {
  public Number x;

  public R(final Number _x) {

    //@ assert Utils.is_nat(_x);

    x = _x;
    //@ assert Utils.is_nat(x);

  }
  /*@ pure @*/

  public boolean equals(final Object obj) {

    if (!(obj instanceof project.Entrytypes.R)) {
      return false;
    }

    project.Entrytypes.R other = ((project.Entrytypes.R) obj);

    return Utils.equals(x, other.x);
  }
  /*@ pure @*/

  public int hashCode() {

    return Utils.hashCode(x);
  }
  /*@ pure @*/

  public project.Entrytypes.R copy() {

    return new project.Entrytypes.R(x);
  }
  /*@ pure @*/

  public String toString() {

    return "mk_Entry`R" + Utils.formatFields(x);
  }
  /*@ pure @*/

  public Number get_x() {

    Number ret_2 = x;
    //@ assert project.Entry.invChecksOn ==> (Utils.is_nat(ret_2));

    return ret_2;
  }

  public void set_x(final Number _x) {

    //@ assert project.Entry.invChecksOn ==> (Utils.is_nat(_x));

    x = _x;
    //@ assert project.Entry.invChecksOn ==> (Utils.is_nat(x));

  }
  /*@ pure @*/

  public Boolean valid() {

    return true;
  }
}

##########
package project.Entrytypes;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class St implements Record, java.io.Serializable {
  public project.Entrytypes.R r;

  public St(final project.Entrytypes.R _r) {

    //@ assert Utils.is_(_r,project.Entrytypes.R.class);

    r = _r != null ? Utils.copy(_r) : null;
    //@ assert Utils.is_(r,project.Entrytypes.R.class);

  }
  /*@ pure @*/

  public boolean equals(final Object obj) {

    if (!(obj instanceof project.Entrytypes.St)) {
      return false;
    }

    project.Entrytypes.St other = ((project.Entrytypes.St) obj);

    return Utils.equals(r, other.r);
  }
  /*@ pure @*/

  public int hashCode() {

    return Utils.hashCode(r);
  }
  /*@ pure @*/

  public project.Entrytypes.St copy() {

    return new project.Entrytypes.St(r);
  }
  /*@ pure @*/

  public String toString() {

    return "mk_Entry`St" + Utils.formatFields(r);
  }
  /*@ pure @*/

  public project.Entrytypes.R get_r() {

    project.Entrytypes.R ret_3 = r;
    //@ assert project.Entry.invChecksOn ==> (Utils.is_(ret_3,project.Entrytypes.R.class));

    return ret_3;
  }

  public void set_r(final project.Entrytypes.R _r) {

    //@ assert project.Entry.invChecksOn ==> (Utils.is_(_r,project.Entrytypes.R.class));

    r = _r;
    //@ assert project.Entry.invChecksOn ==> (Utils.is_(r,project.Entrytypes.R.class));

  }
  /*@ pure @*/

  public Boolean valid() {

    return true;
  }
}

##########
