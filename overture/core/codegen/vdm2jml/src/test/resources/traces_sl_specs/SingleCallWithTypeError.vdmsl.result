package project;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class Entry implements java.io.Serializable {
  /*@ public ghost static boolean invChecksOn = true; @*/

  private Entry() {}

  /*@ pure @*/

  public static Boolean f(final Boolean x) {

    //@ assert Utils.is_bool(x);

    Boolean ret_1 = x;
    //@ assert Utils.is_bool(ret_1);

    return ret_1;
  }

  public static void Entry_T1_Run(final TestAccumulator testAccumulator) {

    final Store store = new Store();
    final IdGenerator gen = new IdGenerator();
    {
      final Number ID_1 = gen.inc();
      store.staticReg(ID_1, Entry.class);
    }

    SequenceTraceNode sequence_1 = new SequenceTraceNode();
    AlternativeTraceNode alternatives_2 = new AlternativeTraceNode();
    VDMSet set_2 = SetUtil.set(1L, true);
    for (Iterator iterator_2 = set_2.iterator(); iterator_2.hasNext(); ) {
      final Object a = ((Object) iterator_2.next());
      AlternativeTraceNode alternatives_3 = new AlternativeTraceNode();
      VDMSet set_1 = SetUtil.set(2L, false);
      for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext(); ) {
        final Object b = ((Object) iterator_1.next());
        SequenceTraceNode sequence_2 = new SequenceTraceNode();
        final Object arg_1 = a;
        CallStatement callStm_1 =
            new CallStatement() {
              public Boolean isTypeCorrect() {

                try {
                  //@ assert Utils.is_bool(arg_1);

                } catch (AssertionError e) {
                  return false;
                }

                return true;
              }

              public Object execute() {

                return f(((Boolean) arg_1));
              }

              public String toString() {

                return "f(" + Utils.toString(arg_1) + ")";
              }
            };
        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);
        sequence_2.add(apply_1);

        final Object arg_2 = b;
        CallStatement callStm_2 =
            new CallStatement() {
              public Boolean isTypeCorrect() {

                try {
                  //@ assert Utils.is_bool(arg_2);

                } catch (AssertionError e) {
                  return false;
                }

                return true;
              }

              public Object execute() {

                return f(((Boolean) arg_2));
              }

              public String toString() {

                return "f(" + Utils.toString(arg_2) + ")";
              }
            };
        StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);
        sequence_2.add(apply_2);

        sequence_2.addVarFirst(new TraceVariable("b", "(bool | nat1)", Utils.toString(b)));
        alternatives_3.add(sequence_2);
      }

      alternatives_3.addVarFirst(new TraceVariable("a", "(bool | nat1)", Utils.toString(a)));
      alternatives_2.add(alternatives_3);
    }
    sequence_1.add(alternatives_2);

    TraceNode.executeTests(sequence_1, testAccumulator, store);
  }

  public String toString() {

    return "Entry{}";
  }
}

##########
