p(a,s)
true
cases true:  true -> true, others -> false end
cases true:  true -> true, "kk"-> "kk" others -> false end
'a'
if false then false else true
exists1 z  in set zz & true
exists z  in set zz & true
a.field
op1().b
mk_(4,"Something",<Select>).#2
mk_a.#2
forall x,y in set z & true
a.foo(a,b,z)
if false then true else if false then true else false
123
iota a in set b & true
is_bool(a)
isofbaseclass(Foo, f)
isofclass(Foo, f)
//lambda x: int & x + 1
let x in set t be st x <> 1 in 8
let x = 5 in 8
def x = 5 in true
{ed |-> er | x in set m & P}
{d1 |-> r1, d2 |-> r2}
m1: map nat to nat
mk_token("a")
mk_bool(true)
mk_MyRecord(a,d)
mk_T(e1, e2)
mu(e, id1 |-> e1, id2 |-> e2)
new a()
nil
foo : () => () foo()== is not yet specified
foo : () => () foo()== is not yet specified post x = 5
foo : () => () foo()== is not yet specified pre x >= 0
1.1
<bazinga>
samebaseclass(a,b)
sameclass(a, b)
self
foo : () => () foo()== is subclass responsibility
"Foo"
s(1,...,10)
mk_(18,"aa",<Foo>)
threadid
time
a
[i*i | i in set {1,..., 10} & i mod 2 = 0]
[5,8,1,3,6]
{x | y in set z & y <> 5}
{1,2,3,4}
{5,...,9}
