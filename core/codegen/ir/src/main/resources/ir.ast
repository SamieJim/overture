Packages
base org.overture.codegen.ir;
analysis org.overture.codegen.ir.analysis;
  
Tokens
/* This section declared tokens as internal types or external classes
 * internal definitions:
 *  plus='+';
 *  
 * external
 *  location = 'java:org.overture.ast.lex.LexLocation';
 */
 
  vdmType = 'java:org.overture.ast.types.PType';
  SourceNode = 'java:org.overture.codegen.ir.SourceNode';
  
  // Java
  java_Boolean = 'java:java.lang.Boolean';
  java_Long = 'java:java.lang.Long';
  java_Integer = 'java:java.lang.Integer';
  java_Double = 'java:java.lang.Double';
  java_Character = 'java:java.lang.Character';
  java_String = 'java:java.lang.String';
  java_Object = 'java:java.lang.Object';
  
  // Wraps a string type so it can be used as a field type
  eString ='java:org.overture.ast.util.ClonableString';
     
Abstract Syntax Tree
/* This section declares the AST by giving root nodes and their possible sub classe */

IR {-> package='org.overture.codegen.ir'
	| (sourceNode):SourceNode
	| (tag):java_Object // Tags carry information to support IR analysis
	| (metaData):eString*} // Meta data is intended to hold printable information such as code annotations
	= #pattern
	| #bind
	| #multipleBind
	| #name
	| #decl
	| #imports
	| #import
	| #exports
	| #export
	| #stateDesignator
	| #objectDesignator
	| #localParam
	| #stm
	| #letBeSt
	| #exp
	| #type
	| #modifier
	| #term
	| #traceDecl
	| #traceCoreDecl
	;

#imports {-> package='org.overture.codegen.ir.declarations'} 
    = {module} [name]:java_String [imports]:IR.#imports.fromModule*
    | {fromModule} [name]:java_String [signatures]:IR.#import**
    ;
    
#import {-> package='org.overture.codegen.ir.declarations'
	|	[name]:java_String 
	|	[renamed]:java_String 
	|	[fromModuleName]:java_String/*(from):IR.#decl.module*/}
    =   {all}
    |   {type} [decl]:IR.#decl.type
    |   #value
    ;
    
#value {-> package='org.overture.codegen.ir.declarations'
	|	(importType):IR.#type}
    =   {value}
    |   {function} [typeParams]:IR.#name.token* //Because [typeParams]:java_String* is not supported by the AstCreator
    |   {operation}
    ;

#exports {-> package='org.overture.codegen.ir.declarations'}
    =   {module} [exports]:IR.#export**
    ;

#export {-> package='org.overture.codegen.ir.declarations'
	|	[decl]:IR.#decl*}
    =   {all}
    |   {function} [nameList]:IR.#name.token* (exportType):IR.#type
    |   {operation} [nameList]:IR.#name.token* (exportType):IR.#type
    |   {type} [name]:java_String [struct]:java_Boolean
    |   {value} [nameList]:IR.#name.token* (exportType):IR.#type
    ;

#pattern {-> package='org.overture.codegen.ir.patterns'}
	= {identifier} [name]:java_String
	| {ignore}
	| {bool} [value]:java_Boolean
	| {char} [value]:java_Character
	| {int}	[value]:java_Long
	| {null}
	| {quote} [value]:java_String
	| {real} [value]:java_Double
	| {string} [value]:java_String
	| {tuple} [patterns]:IR.#pattern*
	| {record} [typename]:java_String [patterns]:IR.#pattern* [type]:IR.#type
	;

#bind {-> package='org.overture.codegen.ir.patterns'
	|	[pattern]:IR.#pattern}
    =   {set} [set]:IR.#exp
    |   {type} [type]:IR.#type
    |   {seq} [seq]:IR.#exp
    ;
		
#multipleBind {-> package='org.overture.codegen.ir.patterns'
	|	[patterns]:IR.#pattern*}
    =   {set}  [set]:IR.#exp //binds
    |   {type} [type]:IR.#type
    |   {seq} [seq]:IR.#exp
    ;
   
#name {-> package='org.overture.codegen.ir.name'}
	=	{type}
		[name]:java_String
		[definingClass]:java_String
	|	{token}
		[name]:java_String
	;
    
#decl {-> package='org.overture.codegen.ir.declarations'}
	=	{method} //rename to operation
		(preCond):IR.#decl
		(postCond):IR.#decl
		[access]:java_String //Consider introducing access node covering both "access" and "async"
		[async]:java_Boolean
		[static]:java_Boolean
		[abstract]:java_Boolean
		[methodType]:IR.#type.method
		[name]:java_String
		[formalParams]:IR.#localParam.formalParam*
		[isConstructor]:java_Boolean
		[templateTypes]:IR.#type.template*
		[implicit]:java_Boolean
		[raises]:IR.#type*
		[body]:IR.#stm
	|	{func}
		(preCond):IR.#decl
		(postCond):IR.#decl
		[access]:java_String
		[abstract]:java_Boolean
		[methodType]:IR.#type.method
		[name]:java_String
		[formalParams]:IR.#localParam.formalParam*
		[templateTypes]:IR.#type.template*
		[implicit]:java_Boolean
		[raises]:IR.#type*
		[body]:IR.#exp
	|	{field} 
    	[access]:java_String
    	[static]:java_Boolean
    	[volatile]:java_Boolean
    	[final]:java_Boolean
    	[type]:IR.#type
    	[name]:java_String
    	[initial]:IR.#exp
   	|	#Class
    |	{module}
    	[name]:java_String
    	[import]:IR.#imports.module
    	[exports]:IR.#exports.module
    	[decls]:IR.#decl*
    	[isFlat]:java_Boolean
    	[isDLModule]:java_Boolean
    |   {state}
    	[access]:java_String
    	[executable]:java_Boolean
    	[name]:java_String
    	[fields]:IR.#decl.field*
    	[invPattern]:IR.#pattern
    	[invExp]:IR.#exp
    	[invDecl]:IR.#decl.func
    	[initPattern]:IR.#pattern
    	[initExp]:IR.#exp
    	[initDecl]:IR.#decl.func
    |	{interface}
    	[templateTypes]:IR.#type.template*
    	[extension]:IR.#name.token*
    	[package]:java_String
    	[name]:java_String
    	[fields]:field*
    	[methodSignatures]:IR.#decl.method*
    |	{record}
    	//TODO: Should have [access]:java_String
    	[name]:java_String
    	[invariant]:IR.#decl
    	[fields]:field*
    	[methods]:IR.#decl.method*
    |	{thread}
    	[def]:IR.#decl
    	[stm]:IR.#stm
    	[type]:IR.#type
    |	{type}
    	[access]:java_String
    	[inv]:IR.#decl
    	[decl]:IR.#decl
    |	{catchClause}
    	[type]:IR.#type
    	[name]:java_String
    	[stm]:IR.#stm
    |	{persync}
    	[opname]:java_String
    	[guardname]:java_String
    	[pred]:IR.#exp
    |	{renamed}
        [def]:IR.#decl
    |	{mutexSync}
    	[opnames]:IR.#name*
    |	{var}
    	[final]:java_Boolean
    	[type]:IR.#type
    	[pattern]:IR.#pattern
    	[exp]:IR.#exp
    |	{namedType}
    	[name]:IR.#name.type
    	[type]:IR.#type
    |	{namedTrace}
    	[pathname]:IR.#name.token*
    	[terms]:IR.#term.traceDecl*
	;
	
#Class {-> package='org.overture.codegen.ir.declarations'
  | (globalMetaData):eString*
  | [package]:java_String
  | (dependencies):eString*
  | [access]:java_String
  | [abstract]:java_Boolean
  | [static]:java_Boolean 
  | [name]:java_String
  | [fields]:field*
  | [invariant]:IR.#decl
  | [methods]:IR.#decl.method*
  | [functions]:IR.#decl.func*
  | [traces]:IR.#decl.namedTrace*
  | [superNames]:IR.#name.token*
  | [thread]:IR.#decl.thread
  | [innerClasses]:IR.#decl.class*
  | [interfaces]:IR.#decl.interface*
  | [typeDecls]:IR.#decl.type*
  | [perSyncs]:IR.#decl.persync*
  | [mutexSyncs]:IR.#decl.mutexSync*}
   = {bus}
   | {cpu}
   | {system}
   | {default}
  ;
	
#stateDesignator {-> package='org.overture.codegen.ir.statements'
	| [type]:IR.#type }
	= {identifier} [name]:java_String [explicit]:java_Boolean [className]:java_String [isLocal]:java_Boolean
	| {field} [object]:IR.#stateDesignator [field]:java_String
	| {mapSeq} [mapseq]:IR.#stateDesignator [exp]:IR.#exp
	;

#objectDesignator {-> package='org.overture.codegen.ir.statements'}
	=   {apply} [object]:IR.#objectDesignator [args]:IR.#exp*
    |   {field} [object]:IR.#objectDesignator [fieldModule]:java_String [fieldName]:java_String
    |   {identifier} [exp]:IR.#exp //Normally a var (e.g. [exp]:IR.#exp.#Var) but a transformation may need to replace it with a cast expression
    |   {new} [exp]:IR.#exp.new
    |   {self}
    ;
    
#localParam {-> package='org.overture.codegen.ir.declarations'}
           = {formalParam} [type]:IR.#type [pattern]:IR.#pattern
           ;

#stm {-> package='org.overture.codegen.ir.statements'}
           =	{if} [ifExp]:IR.#exp [thenStm]:IR.#stm [elseIf]:IR.#stm.elseIf* [elseStm]:IR.#stm
           | 	{elseIf} [elseIf]:IR.#exp [thenStm]:IR.#stm
           |  {exp} [exp]:IR.#exp
           | 	{skip}
           |	{return} [exp]:IR.#exp
           |	{abstractBody}
           |	{assignment} [target]:IR.#stateDesignator [exp]:IR.#exp
           |	{assignToExp} [target]:IR.#exp [exp]:IR.#exp
           |	{localPatternAssignment} [target]:IR.#pattern [exp]:IR.#exp (nextElementDecl):IR.#decl.var
           |	{block}	[scoped]:java_Boolean [localDefs]:IR.#decl.var* [statements]:IR.#stm*
           |	{nonDeterministicBlock} [statements]:IR.#stm*
           |	{callObject} [type]:IR.#type [designator]:IR.#objectDesignator /*[className]:java_String*/ [fieldName]:java_String 
           					 [args]:IR.#exp*
           |	{callObjectExp} [type]:IR.#type [obj]:IR.#exp /*[className]:java_String*/ [fieldName]:java_String 
           					 [args]:IR.#exp*
           |	#call
           |	{notImplemented}
           |	{forIndex} [var]:java_String [from]:IR.#exp [to]:IR.#exp [by]:IR.#exp [body]:IR.#stm
           |	{forAll} [pattern]:IR.#pattern [exp]:IR.#exp [body]:IR.#stm
           |	{while} [exp]:IR.#exp [body]:IR.#stm
           |	{letBeSt} [header]:IR.#letBeSt.header [statement]:IR.#stm
           |	{throw} [exp]:IR.#exp
           |	{forLoop} [init]:IR.#decl.var [cond]:IR.#exp [inc]:IR.#exp [body]:IR.#stm
           |	{increment} [var]:IR.#exp
           |	{decrement} [var]:IR.#exp
           |	{raiseError} [error]:IR.#exp.#RuntimeError
           |	{cases} [exp]:IR.#exp [cases]:IR.#stm.#altStm.case* [others]:IR.#stm
           |	#altStm
           |	{error}
           |  {exit} [exp]:IR.#exp
           |	{continue}
           |	{break}
           |	{start} [exp]:IR.#exp [type]:IR.#type
           |	{startlist} [exp]:IR.#exp [type]:IR.#type
           |	{try} [stm]:IR.#stm [catchClauses]:IR.#decl.catchClause* [finally]:IR.#stm
           |	{periodic} [opname]:java_String [args]:IR.#exp*
         //|	Sporadic
           |	{stackDecl}
           		[type]:IR.#type
           		[name]:java_String
           		[args]:IR.#exp*
			|	{mapSeqUpdate} [col]:IR.#exp [index]:IR.#exp [value]:IR.#exp
			|	{invCheck} [subject]:IR.#exp
			|	{atomic} [statements]:IR.#stm*
			| {cycles} [cycles]:IR.#exp [stm]:IR.#stm
			| {duration} [duration]:IR.#exp [stm]:IR.#stm
			|	{meta}
      | {seqCompAdd} [seq]:IR.#exp [element]:IR.#exp
      | {setCompAdd} [set]:IR.#exp [element]:IR.#exp
      | {mapCompAdd} [map]:IR.#exp [element]:IR.#exp
      ;

#call {-> package='org.overture.codegen.ir.statements'
	| 	[type]:IR.#type
	|	[isStatic]:java_Boolean
	|	[name]:java_String
	|	[args]:IR.#exp*}
    =  	{plain} [classType]:IR.#type
    |	{super} 
    ;

           
#altStm {-> package='org.overture.codegen.ir.statements'}
    = {case} [pattern]:IR.#pattern [result]:IR.#stm [patternType]:IR.#type
    ;
           
#letBeSt {-> package='org.overture.codegen.ir.utils'}
	= {header} [binding]:IR.#multipleBind [suchThat]:IR.#exp //The Overture AST uses a multiplebind 
	;
	
#exp {-> package='org.overture.codegen.ir.expressions'
	| [type]:IR.#type}
    =	#Unary
    |	#Binary
    |	{field} [object]:IR.#exp [memberName]: java_String
    |	{apply} [root]:IR.#exp [args]:IR.#exp*
	|	{new} [name]:IR.#name.type [args]:IR.#exp*
	|	#Var
	|	#Is
    |	#Literal
    |	{self}
    |	{null}
    |	{letDef} [localDefs]:IR.#decl.var* [exp]:IR.#exp
    |	{methodInstantiation} [func]:IR.#exp [actualTypes]:IR.#type*
    |	{tuple} [args]:IR.#exp* [tupleType]:IR.#type.tuple
    |	{fieldNumber} [field]:java_Long [tuple]:IR.#exp
    |	{tupleSize} [tuple]:IR.#exp
    |	{ternaryIf} [condition]:IR.#exp [trueValue]:IR.#exp [falseValue]:IR.#exp
    |   {maplet}  [left]:IR.#exp [right]:IR.#exp
    |	{letBeSt} [header]:IR.#letBeSt.header [value]:IR.#exp
    |	{iota} [bindList]:IR.#multipleBind* [predicate]:IR.#exp
    |	#Seq
    |	#Set
    |	#Map
    |	{mkBasic} [arg]:IR.#exp
    |	{recordMod} [rec]:IR.#exp [recType]:IR.#type.record [modifiers]:IR.#modifier.record*
    |	#Quantifier
    |	{preInc} [exp]:IR.#exp
    |	{preDec} [exp]:IR.#exp
    |	{postInc} [exp]:IR.#exp
    |	{postDec} [exp]:IR.#exp
    |	{deRef} [exp]:IR.#exp //For pointer dereference
    |	#RuntimeError
        //When generating code using the abstract syntax of this tree structure "external" 
    	//is used for refering to expressions of the target environment (e.g. that of Java) 
    	//that are not directly mapped to by the code generator.
    |	{external} [targetLangExp]:java_String
    |	{typeArg} [type]:IR.#type
    |	{lambda} [params]:IR.#localParam.formalParam* [exp]:IR.#exp
    |	{anonymousClass} [methods]:IR.#decl.method*
    |	{notImplemented}
    |	{undefined}
    |	{threadId}
    |	{tupleCompatibility} [tuple]:IR.#exp [types]:IR.#type*
    |	{cases} [exp]:IR.#exp [cases]:IR.#exp.#altExp.case* [others]:IR.#exp
    |	#altExp
    |	{subSeq} [seq]:IR.#exp [from]:IR.#exp [to]:IR.#exp
    |	{history}[histype]:java_String [opsname]:java_String [sentinelType]:IR.#type.class
    |	{time}
    |	{assignExp} [target]:IR.#exp [value]:IR.#exp
    |	{mapSeqGet} [col]:IR.#exp [index]:IR.#exp
    |	{isOfBaseClass} [baseClass]:java_String [exp]:IR.#exp
    |	{isOfClass} [checkedType]:IR.#type [exp]:IR.#exp
    |	{sameBaseClass} [left]:IR.#exp [right]:IR.#exp
    |	{sameClass} [left]:IR.#exp [right]:IR.#exp
    ;

#modifier {-> package='org.overture.codegen.ir.expressions'}
    = {record} [name]:java_String [value]:IR.#exp
    ;

#Is {-> package='org.overture.codegen.ir.expressions'
	| [exp]:IR.#exp}
    =	{bool}
    |	{nat}
    |	{nat1}
    |	{int}
    |	{rat}
    |	{real}
    |	{char}
    |	{token}
    |	{tuple} [checkedType]:IR.#type
    |	{general} [checkedType]:IR.#type
    ;   

#altExp {-> package='org.overture.codegen.ir.expressions'}
    = {case} [pattern]:IR.#pattern [result]:IR.#exp [patternType]:IR.#type
    ;

#RuntimeError {-> package='org.overture.codegen.ir.expressions'}
    =   {LetBeStNoBinding}
    |	{iota} [message]:java_String
    |	{patternMatch} [message]:java_String
    |	{missingMember} [message]:java_String
    	//Raised at runtime when an attemp is made 
		//to access a non-existing member (e.g. operation)
	|	{preCond} [message]:java_String
    ;

#Var {-> package='org.overture.codegen.ir.expressions'
	|	[isLambda]:java_Boolean
	|	[isLocal]:java_Boolean
	|	[name]:java_String}
    =   {identifier}
	|	{explicit} [classType]:IR.#type
	|	{super}
    ;
    
#Literal {-> package='org.overture.codegen.ir.expressions'}
    =	{int} [value]:java_Long
    |	{real} [value]:java_Double
    |	{bool} [value]:java_Boolean
    |	{char} [value]:java_Character
    |	{quote} [value]:java_String
    |	{string} [value]:java_String [isNull]:java_Boolean
	;
	
#Quantifier {-> package='org.overture.codegen.ir.expressions'
	| [bindList]:IR.#multipleBind*
	| [predicate]:IR.#exp}
	= {forAll}
	| {exists}
	| {exists1}
	;
    
#Binary {-> package='org.overture.codegen.ir.expressions'
	| [left]:IR.#exp
	| [right]:IR.#exp}
    =   #Numeric
    |	#Bool
    |	{comp}
    //Special tree construct NOT used when constructing the OO AST from 
    //the VDM model. The addr comparison constructs can, however, be convenient 
    //when generating real code (e.g., Java) that is first described using 
    //the abstract syntax of the OO AST.
    |	{addrEquals}
    |	{addrNotEquals} 
    |	{equals}
    |	{notEquals}
    |	{seqConcat}
    |	{seqModification}
    |   {inSet}
    |	{setUnion}
    |	{setIntersect}
    |	{setDifference}
    |	{setSubset}
    |	{setProperSubset}
    |	{mapUnion}
    |	{mapIteration} // ** in VDM
    |	{funcIteration} // ** in VDM
    |	{mapOverride}
    |	{domainResTo} //Syntax: '<:'
    |	{domainResBy} //Syntax: '<-:'
    |	{rangeResTo} //Syntax: ':>'
    |	{rangeResBy} //Syntax: ':->'
    ;
 
#Numeric {-> package='org.overture.codegen.ir.expressions'}
    =	{intDiv}
    |	{divide}
    |	{greaterEqual}
    |	{greater}
    |	{lessEqual}
    |	{less}
    |	{mod}   
    |	{plus} 
    |   {subtract}
    |	{rem}
    |	{times}
    |	{power} // ** in VDM
    ;   

#Bool {-> package='org.overture.codegen.ir.expressions'}
    =	{or}
    |	{and}
    |	{xor}
	;
 
#Unary {-> package='org.overture.codegen.ir.expressions'
	| [exp]:IR.#exp}
    =   {plus} 
    |   {minus}
    |	{cast}
    |	{isolation}
    |	{len}
    |	{card}
    |	{elems}
    |	{indices}
    |	{head}
    |	{tail}
    |	{reverse}
    |	{floor}    
    |	{abs}
    |	{not}
    |	{distConcat}
    |	{distUnion}
    |	{distIntersect}
    |	{powerSet}
    |	{mapDomain}
    |	{mapRange} 
    |	{distMerge}
    |	{mapInverse}
    |	{seqToString}
    |	{stringToSeq}
    ;
    
#Seq {-> package='org.overture.codegen.ir.expressions'}
	= {enum} [members]:IR.#exp*
	| {comp} [first]:IR.#exp [setBind]:IR.#bind.set [seqBind]:IR.#bind.seq [setSeq]:IR.#exp [predicate]:IR.#exp
	;

#Set {-> package='org.overture.codegen.ir.expressions'}
	= {enum} [members]:IR.#exp*
	| {comp} [first]:IR.#exp [bindings]:IR.#multipleBind* [predicate]:IR.#exp//In the Overture AST bindings are of type multipleBind* as it also allows type binds.
	| {range} [first]:IR.#exp [last]:IR.#exp
	;

#Map {-> package='org.overture.codegen.ir.expressions'}
	= {enum} [members]:IR.#exp.maplet*
	| {comp} [first]:IR.#exp.maplet [bindings]:IR.#multipleBind* [predicate]:IR.#exp
	;

#type {-> package='org.overture.codegen.ir.types'
	| [optional]:java_Boolean
	| [namedInvType]:IR.#decl.namedType}
    =   #basic
    |	{Object}
    |	{void}
    |	{class} [types]:IR.#type* [name]:java_String
    	//When generating code using the abstract syntax of this tree structure "external" 
    	//is used for refering to types of the target environment (e.g. that of Java) 
    	//that are not directly mapped to by the code generator.
    |	{external} [name]:java_String [info]:externalType.info
    |	{record} [name]:IR.#name.type
    |	{string}
    |	{template} [name]:java_String
    |	{tuple} [types]:IR.#type*
    |   {method} [params]:IR.#type* [result]:IR.#type [equivalent]:vdmType
    |	#map
    |	#set
    |	#seq
    |	#basicTypeWrappers
    |	{error}
    |	{interface} [types]:IR.#type* [name]:java_String
    |	{union} [types]:IR.#type*
    |	{quote} [value]:java_String
    |	{unknown}
    ;
    
externalType {-> package='org.overture.codegen.ir.utils'}
	= {info} [namespace]:java_String [filePath]:java_String 
	;

#basicTypeWrappers {-> package='org.overture.codegen.ir.types'}
	= {Int}
	| {Nat1}
	| {Nat}
	| {Rat}
	| {Real}
	| {Char}
	| {Bool}
	;

#set {-> package='org.overture.codegen.ir.types'
	| [empty]:java_Boolean
	| [setOf]:IR.#type}
    =   {set} 
    ;
    
#seq {-> package='org.overture.codegen.ir.types'
	| [empty]:java_Boolean
	| [seq1]:java_Boolean
	| [seqOf]:IR.#type}
    =   {seq}
    ;
    
#map {-> package='org.overture.codegen.ir.types'
	| [empty]:java_Boolean
	| [injective]:java_Boolean
	| [from]:IR.#type
	| [to]:IR.#type }
    =   {map}
    ;
    
#basic {-> package='org.overture.codegen.ir.types'}
    =   #numeric
    |	{char}
    |	{bool}
    |	{token}
    ;

#numeric {-> package='org.overture.codegen.ir.types'}
    =   {int}
    |	{nat1}
    |	{nat}
    |	{rat}
    |   {real} 
    ;

#term {-> package='org.overture.codegen.ir.traces'}
    =   {traceDecl} [traceDecls]:IR.#traceDecl*
    ;
    
#traceDecl {-> package='org.overture.codegen.ir.traces'}
    =   {instance} //Not there...
    |   {letBeStBinding}
    	[bind]:IR.#multipleBind.set //[bind]:IR.#multipleBind (Only set binds are supported)
    	[stExp]:IR.#exp
    	[body]:IR.#traceDecl
    |   {letDefBinding}
    	[localDefs]:IR.#decl.var*//[localDecls]:IR.#decl*
    	[body]:IR.traceDecl
    |   {repeat} [core]:IR.#traceCoreDecl [from]:java_Long [to]:java_Long
    ;
    
#traceCoreDecl {-> package='org.overture.codegen.ir.traces'}
    =   {applyExp} [callStm]:IR.#stm
    |   {bracketedExp} [terms]:IR.#term.traceDecl*
    |   {concurrentExp} [decls]:IR.#traceDecl*
    ;
     
Aspect Declaration
/* This section allows fields of root types to be declared e.g. exp*/

//1) No check for clash wrt nameing of fields
//2) Only graphs
