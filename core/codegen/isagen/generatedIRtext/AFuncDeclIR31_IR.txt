Source Node : private static sm2tsm: (FSM3`StateMap -> FSM3`TStateMap)
	sm2tsm(sm) ==
{s |-> (if (s in set (dom sm))
then sm(s)
else <error_>) | s in set ALL_STATES}
Parent Node : null
Children w/ inherited fields : 
---- _name = sm2tsm
---- _raises = []
---- _preCond = AFuncDeclIRAFuncDeclIRAFuncDeclIRAFuncDeclIR(org.overture.codegen.ir.types.AMapMapTypeIR@3705e258 ==> bool)pre_sm2tsm[org.overture.codegen.ir.types.AMapMapTypeIR@772a6c8fsm ][]AFuncDeclIR[]isa_invTrue(sm)
---- _body = sorg.overture.codegen.ir.expressions.AInSetBinaryExpIR@282ae625sm(s)error_[s in set ALL_STATES]ACompMapExpIR
---- _metaData = []
---- _implicit = false
---- _abstract = false
---- _access = private
---- _templateTypes = []
---- _methodType = (org.overture.codegen.ir.types.AMapMapTypeIR@568f2cf5 ==> org.overture.codegen.ir.types.AMapMapTypeIR@4131fe90)
---- _postCond = AFuncDeclIRAFuncDeclIRAFuncDeclIRAFuncDeclIR(org.overture.codegen.ir.types.AMapMapTypeIR@655bac2d * org.overture.codegen.ir.types.AMapMapTypeIR@1a3f756d ==> bool)post_sm2tsm[org.overture.codegen.ir.types.AMapMapTypeIR@35f81a5bsm , org.overture.codegen.ir.types.AMapMapTypeIR@7bf3a70aRESULT ][]AFuncDeclIR[]org.overture.codegen.ir.expressions.AAndBoolBinaryExpIR@4371469d
---- _formalParams = [org.overture.codegen.ir.types.AMapMapTypeIR@2204c783sm ]
Class : class org.overture.codegen.ir.declarations.AFuncDeclIR
