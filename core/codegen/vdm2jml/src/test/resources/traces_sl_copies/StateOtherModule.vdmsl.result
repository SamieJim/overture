package project;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class Entry implements java.io.Serializable {
  /*@ public ghost static boolean invChecksOn = true; @*/

  private Entry() {}

  public static void Entry_T1_Run(final TestAccumulator testAccumulator) {

    final Store store = new Store();
    final IdGenerator gen = new IdGenerator();
    {
      final Number ID_1 = gen.inc();
      final Number ID_2 = gen.inc();
      store.staticReg(ID_1, Entry.class);
      store.staticReg(ID_2, Other.class);
    }

    SequenceTraceNode sequence_1 = new SequenceTraceNode();
    CallStatement callStm_1 =
        new CallStatement() {
          public Boolean meetsPreCond() {

            return Other.pre_op(TraceUtil.readState(Other.class, project.Othertypes.St.class));
          }

          public Object execute() {

            return Other.op();
          }

          public String toString() {

            return "Other`op()";
          }
        };
    StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

    RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_1, 1L, 5L);

    sequence_1.add(repeat_1);

    TraceNode.executeTests(sequence_1, testAccumulator, store);
  }

  public String toString() {

    return "Entry{}";
  }
}

##########
package project;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class Other implements java.io.Serializable {
  /*@ spec_public @*/

  private static project.Othertypes.St St = new project.Othertypes.St(0L);

  private Other() {}

  //@ requires pre_op(St);

  public static Number op() {

    //@ assert St != null;

    St.set_x(St.get_x().longValue() + 1L);

    Number ret_1 = St.get_x();
    //@ assert Utils.is_nat(ret_1);

    return ret_1;
  }
  /*@ pure @*/

  public static Boolean pre_op(final project.Othertypes.St St) {

    //@ assert Utils.is_(St,project.Othertypes.St.class);

    Boolean ret_2 = St.get_x().longValue() < 2L;
    //@ assert Utils.is_bool(ret_2);

    return ret_2;
  }

  public String toString() {

    return "Other{" + "St := " + Utils.toString(St) + "}";
  }
}

##########
package project.Othertypes;

import java.util.*;
import org.overture.codegen.runtime.*;
import org.overture.codegen.vdm2jml.runtime.*;

@SuppressWarnings("all")
//@ nullable_by_default

final public class St implements Record, java.io.Serializable {
  public Number x;

  public St(final Number _x) {

    //@ assert Utils.is_nat(_x);

    x = _x;
    //@ assert Utils.is_nat(x);

  }
  /*@ pure @*/

  public boolean equals(final Object obj) {

    if (!(obj instanceof project.Othertypes.St)) {
      return false;
    }

    project.Othertypes.St other = ((project.Othertypes.St) obj);

    return Utils.equals(x, other.x);
  }
  /*@ pure @*/

  public int hashCode() {

    return Utils.hashCode(x);
  }
  /*@ pure @*/

  public project.Othertypes.St copy() {

    return new project.Othertypes.St(x);
  }
  /*@ pure @*/

  public String toString() {

    return "mk_Other`St" + Utils.formatFields(x);
  }
  /*@ pure @*/

  public Number get_x() {

    Number ret_3 = x;
    //@ assert project.Entry.invChecksOn ==> (Utils.is_nat(ret_3));

    return ret_3;
  }

  public void set_x(final Number _x) {

    //@ assert project.Entry.invChecksOn ==> (Utils.is_nat(_x));

    x = _x;
    //@ assert project.Entry.invChecksOn ==> (Utils.is_nat(x));

  }
  /*@ pure @*/

  public Boolean valid() {

    return true;
  }
}

##########
