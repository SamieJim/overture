module M

exports all
definitions

types

R :: x : int
inv r == r.x > 0;

R1 :: s : seq of R
inv r1 == r1.s <> [];

state St of
s : seq of R
m : map nat to R
r : R1
ss : seq of seq of R
init s == s = mk_St([mk_R(1)],{1 |-> mk_R(5)}, mk_R1([mk_R(5)]), [[mk_R(1)]])
inv s == s.s(1).x > 0
end

operations

seqField : () ==> nat
seqField () ==
(
  s(1).x := 5;
  return 0;
);

mapField : () ==> nat
mapField () ==
(
  m(1).x := 5;
  return 0;
);

fieldSeqField : () ==> nat
fieldSeqField () ==
(
  r.s(1).x := 5;
  return 0;
);

seqSeqField : () ==> nat
seqSeqField () ==
(
  ss(1)(1).x := 5;
  return 0;
)

end M