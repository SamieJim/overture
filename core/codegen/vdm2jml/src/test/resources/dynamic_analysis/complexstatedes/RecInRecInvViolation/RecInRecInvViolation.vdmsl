module Entry

exports all
imports from IO all
definitions

types

T1 :: t2 : T2
inv t1 == t1.t2.t3.t4.x > 1;

T2 :: t3 : T3
inv t2 == t2.t3.t4.x > 2 and t2.t3.t4.x <> 60;

T3 :: t4 : T4
inv t3 == t3.t4.x > 3;

T4 :: x : nat
inv t4 == t4.x > 4;

operations

useOk : () ==> nat
useOk () ==
(
  dcl t1 : T1 := mk_T1(mk_T2(mk_T3(mk_T4(5))));
  t1.t2.t3.t4.x := 6;
  t1.t2.t3.t4.x := 7;
  return 0;
);

useNotOk : () ==> nat
useNotOk () ==
(
  dcl t1 : T1 := mk_T1(mk_T2(mk_T3(mk_T4(5))));
  t1.t2.t3.t4.x := 60;
  t1.t2.t3.t4.x := 5;
  return 0;
);

Run : () ==> ?
Run () ==
(
 IO`println("Before useOk");
 let - = useOk() in skip;
 IO`println("After useOk");
 IO`println("Before useNotOk");
 let - = useNotOk() in skip;
 IO`println("After useNotOk");
 return 0;
);

end Entry