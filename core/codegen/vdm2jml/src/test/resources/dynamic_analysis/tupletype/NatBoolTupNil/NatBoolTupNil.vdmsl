module Entry

exports all
imports from IO all
definitions

operations

Run : () ==> ?
Run () ==
(
 IO`println("Before legal use");
 let - : nat * bool = mk_(1,true) in skip;
 IO`println("After legal use");
 IO`println("Before illegal use");
 let - : nat * bool = TupNil() in skip;
 IO`println("After illegal use");
 return 0;
);

functions

TupNil :  () -> [nat1 * bool]
TupNil () == nil;

TupVal :  () -> [nat1 * bool]
TupVal () == mk_(1,false);
  
end Entry