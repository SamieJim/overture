\section{Ｄｉｅｔ Calculation}

\begin{vdm_al}
class Ｄｉｅｔ

values
public	e = 1E-10;
public	h = 1e-5;	

functions
static public BMI : real* real -> real
BMI(ｗｅｉｇｈｔ, ｈｅｉｇｈｔ) ==
	let	h100 = ｈｅｉｇｈｔ / 100	in
	ｗｅｉｇｈｔ / h100 ** 2
pre
	ｗｅｉｇｈｔ > 0 and ｈｅｉｇｈｔ > 0
post
	RESULT > 0;

public static ｗｅｉｇｈｔ : () -> seq of char
ｗｅｉｇｈｔ() ==  "getｗｅｉｇｈｔFromBMI ";

\end{vdm_al}
dwdwdwdw

dwdwdw


\begin{vdm_al}
static public getｗｅｉｇｈｔFromBMI : real * real -> real
getｗｅｉｇｈｔFromBMI(ｈｅｉｇｈｔ, aBMI) ==
	let	
		f = lambda ｗｅｉｇｈｔ : real & aBMI - BMI(ｗｅｉｇｈｔ, ｈｅｉｇｈｔ) 
	in
	newton(f)(60)
pre
	ｈｅｉｇｈｔ > 0 and aBMI > 0
post
	abs(aBMI - BMI(RESULT, ｈｅｉｇｈｔ)) <= e;
\end{vdm_al}

\begin{vdm_al}
static public newton: (real ->real) -> real -> real
newton(f)(x) ==
	let	isFinish = lambda y : real & abs(f(y)) < e,
		nextApproximate = lambda y : real & y - (f(y) / derivative(f)(y))	in
	Funtil[real](isFinish)(nextApproximate)(x);
\end{vdm_al}

\begin{vdm_al}
static public derivative : (real -> real) ->real -> real
derivative(f)(x) == (f(x+h) - f(x)) / h ;
\end{vdm_al}

\begin{vdm_al}
static public Funtil[@T] : (@T -> bool) -> (@T -> @T) -> @T -> @T
Funtil(p)(f)(x) == if p(x) then x else Funtil[@T](p)(f)(f(x));
\end{vdm_al}

\begin{vdm_al}
end Ｄｉｅｔ
\end{vdm_al}

\begin{rtinfo}
[TotalxCoverage]{vdm.tc}[Ｄｉｅｔ]
\end{rtinfo}